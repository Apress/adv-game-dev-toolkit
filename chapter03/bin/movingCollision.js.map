{"version":3,"sources":["../src/movingCollision.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,CACjB,0BAA0B,EAC1B,mBAAmB,EACnB,2BAA2B,CAC5B;;;AAAC,AAGF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC;;;;AAAC,AAI5C,CAAC,CAAC,aAAa,EAAE,CAAC;;AAElB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC;;;AAAA,AAGvB,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,IAAI,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAClC,UAAU,EAAE,SAAS,EAAE,OAAO,EAC9B,YAAY,EAAE,WAAW,EAAE,SAAS,EACpC,aAAa;;;AAAC,AAGhB,SAAS,KAAK,GAAG;;;AAGf,OAAK,GAAG,CAAC,CAAC,cAAc,CACtB,2BAA2B,EAC3B,0BAA0B,CAC3B;;;AAAC,AAGF,OAAK,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;;;AAAC,AAGjC,eAAa,GAAG,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,IAAI;;;;AAAC,AAInD,WAAS,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;;;;AAAC,AAIzC,cAAY,GAAG,SAAS,CAAC,IAAI;;;;;;AAAC,AAM9B,aAAW,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;;;;;AAAC,AAKvC,aAAW,CAAC,OAAO,CAAC,IAAI,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;AAAC,AAUnD,SAAO,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AACrD,SAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC;;;AAAC,AAG5B,WAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC3B,SAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACzB,YAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC5B,WAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;;;AAAC,AAG3B,OAAK,CAAC,SAAS,GAAG,EAAE,CAAC;AACrB,WAAS,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;AACjD,SAAO,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;AAC7C,YAAU,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;AACnD,WAAS,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,MAAM;;;AAAC,AAGjD,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;;AAId,MAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,CAAC,EAAE;AAC/F,YAAQ,KAAK,CAAC,SAAS;AACrB,WAAK,IAAI;AACP,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACd,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,MAAM;AACT,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,MAAM;AACT,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACd,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,OAAO;AACV,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,KACT;GACF;;;AAAA,AAGD,OAAK,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;AACpB,OAAK,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;;;AAAC,AAGpB,GAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;;;;AAAC,AAI1B,eAAa,GAAG,CAAC,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;AAEzD,aAAW,CAAC,OAAO,CAAC,IAAI,IAAI;;;;AAI1B,QAAI,OAAO,GAAG,CAAC,MAAM,EAAE,SAAS,KAAK;AACnC,aAAQ,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,CAAC;KACvE,CAAA;AACD,QAAI,OAAO,GAAG,CAAC,MAAM,EAAE,SAAS,KAAK;AACnC,aAAQ,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,MAAM,CAAC;KACxE;;;AAAA,AAGD,QAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,CAAC,EAAE;;;;AAI7F,UAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE;AAC3B,YAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;OACpB,MAAM,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE;AAClC,YAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;;;;AACpB,WAGI;AACH,yBAAe,CAAC,IAAI,CAAC,CAAC;SACvB;KACF;;;AAAA,AAGD,QAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;AAClB,QAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;GACnB,CAAC;;;;AAAC,AAIH,cAAY,GAAG,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,EAAE,KAAK,CAAC;;;;;AAAC,AAK7D,cAAY,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;;;AAGnC,QAAI,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE;;;;AAI3C,iBAAW,GAAG,WAAW,CAAC,MAAM,CAAC,AAAC,IAAI,IAAK;AACzC,YAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;;;AAGxB,sBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;;;AAAC,AAG7B,WAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACf,iBAAO,KAAK,CAAC;SACd,MAAM;AACL,iBAAO,IAAI,CAAC;SACb;OACF,CAAC;;;;;;;;;;AAAC,KAUJ;GACF,CAAC;;;AAAC,AAGH,SAAO,CAAC,OAAO,GAAG,CAAC,SAAS,GAAE,KAAK,CAAC,OAAO,EAAC,UAAU,GAAE,KAAK,CAAC,OAAO,EAAC,QAAQ,GAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;CAChG;;;AAAA,AAGD,SAAS,eAAe,CAAC,MAAM,EAAE;AAC/B,MAAI,EAAE,GAAG,CAAC;MACR,IAAI,GAAG,CAAC;MACR,IAAI,GAAG,CAAC;MACR,KAAK,GAAG,CAAC;MACT,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEhC,UAAQ,SAAS;AACf,SAAK,KAAK;AACR,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM;;AAAA,AAER,SAAK,IAAI;AACP,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACf,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM;;AAAA,AAER,SAAK,EAAE;AACL,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACf,YAAM;;AAAA,AAER,SAAK,IAAI;AACP,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,YAAM;AAAA,GACT;CACF","file":"movingCollision.js","sourcesContent":["let thingsToLoad = [\n  \"images/timeBombPanic.png\",\n  \"fonts/puzzler.otf\",\n  \"maps/simpleCollision.json\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\nconsole.log(g.getIndex)\n\n//Start Hexi\ng.start();\n\n//Game variables\nlet world, alien, leftArrow, upArrow,\n  rightArrow, downArrow, message,\n  bombMapArray, bombSprites, bombLayer,\n  alienMapArray;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make the world from the Tiled JSON data and the tileset PNG image\n  world = g.makeTiledWorld(\n    \"maps/simpleCollision.json\",\n    \"images/timeBombPanic.png\"\n  );\n\n  //Create the `alien` sprite\n  alien = world.getObject(\"alien\");\n\n  //Get a reference to the alien layer's `data` array\n  alienMapArray = world.getObject(\"alienLayer\").data;\n\n  //Get a reference to the bomb layer. \n  //\"bombLayer\" is the name of the bomb layer in Tiled Editor\n  bombLayer = world.getObject(\"bombLayer\");\n\n  //Get a reference to the level's bomb layer array. This is the\n  //bomb layer's `data` array from the tiledMap JSON file\n  bombMapArray = bombLayer.data;\n\n  //Get a reference to all the bomb sprites in the world. \"bomb\" is\n  //the `name` property of the bomb image in the tileset.\n  //`world.getObjects` returns an array of all the sprites that have\n  //that same `name`\n  bombSprites = world.getObjects(\"bomb\");\n\n  //Use the `changeDirection` function to give each\n  //bomb a random starting velocity\n  //(The `changeDirection` function is at the bottom of this file)\n  bombSprites.forEach(bomb => changeDirection(bomb));\n\n  //Alternatively, you can clone the `bombLayer` container's\n  //`children` array\n  //bombSprites = bombLayer.children.slice();\n\n  //Possible ES6 way of doing it:\n  //bombSprites = Array.from(bomblayer.children);\n\n  //Make a text object\n  message = g.text(\"testing\", \"12px puzzler\", \"black\");\n  message.setPosition(10, 10);\n\n  //Create the keyboard objects\n  leftArrow = g.keyboard(37);\n  upArrow = g.keyboard(38);\n  rightArrow = g.keyboard(39);\n  downArrow = g.keyboard(40);\n\n  //Assign the key `press` actions\n  alien.direction = \"\";\n  leftArrow.press = () => alien.direction = \"left\";\n  upArrow.press = () => alien.direction = \"up\";\n  rightArrow.press = () => alien.direction = \"right\";\n  downArrow.press = () => alien.direction = \"down\";\n\n  //Change the game state to `play`\n  g.state = play;\n}\n\n//The `play` function contains all the game logic and runs in a loop\nfunction play() {\n\n  //Move the alien and keep it contained within the canvas\n  //Change the alien's direction only if it's at an interesection\n  if (Math.floor(alien.x) % world.tilewidth === 0 && Math.floor(alien.y) % world.tileheight === 0) {\n    switch (alien.direction) {\n      case \"up\":\n        alien.vy = -4;\n        alien.vx = 0;\n        break;\n      case \"down\":\n        alien.vy = 4;\n        alien.vx = 0;\n        break;\n      case \"left\":\n        alien.vx = -4;\n        alien.vy = 0;\n        break;\n      case \"right\":\n        alien.vx = 4;\n        alien.vy = 0;\n        break;\n    }\n  }\n\n  //Move the alien\n  alien.x += alien.vx;\n  alien.y += alien.vy;\n\n  //Keep the alien contained inside the canvas\n  g.contain(alien, g.stage);\n\n  //Update the `alienMapArray` to reflect any changes in the alien's\n  //position\n  alienMapArray = g.updateMap(alienMapArray, alien, world);\n\n  bombSprites.forEach(bomb => {\n\n    //`atXEdge` and `atYEdge` will return `true` or `false` depending on whether or\n    //not the sprite is at the edges of the canvas\n    let atXEdge = (sprite, container) => {\n      return (sprite.x === 0 || sprite.x + sprite.width === container.width)\n    }\n    let atYEdge = (sprite, container) => {\n      return (sprite.y === 0 || sprite.y + sprite.width === container.height)\n    }\n\n    //Change the bomb's direction if it's at a map grid column or row\n    if (Math.floor(bomb.x) % world.tilewidth === 0 && Math.floor(bomb.y) % world.tileheight === 0) {\n\n      //If the bomb is at the edge of the canvas, \n      //reverse its velocity to keep it inside\n      if (atXEdge(bomb, g.canvas)) {\n        bomb.vx = -bomb.vx;\n      } else if (atYEdge(bomb, g.canvas)) {\n        bomb.vy = -bomb.vy;\n      }\n\n      //If the bomb is inside the canvas, give it a new random direction\n      else {\n        changeDirection(bomb);\n      }\n    }\n\n    //Move the bomb\n    bomb.x += bomb.vx;\n    bomb.y += bomb.vy;\n  });\n\n  //Update the `bombMapArray` to reflect any changes in the bomb\n  //positions\n  bombMapArray = g.updateMap(bombMapArray, bombSprites, world);\n\n  //Compare each element in the `bombMapArray` with each element\n  //in the `alienMapArray`. If there's a bomb gid and an lien gid at the\n  //same index number, then you know there's a collision\n  bombMapArray.forEach((gid, index) => {\n\n    //Does the alien have the same index number as a bomb?\n    if (alienMapArray[index] === 4 && gid === 5) {\n\n      //Yes, so filter out any bomb sprites at this location\n      //(there might be more than one)\n      bombSprites = bombSprites.filter((bomb) => {\n        if (bomb.index === index) {\n\n          //Remove the bomb gid number from the array\n          bombMapArray[bomb.index] = 0;\n\n          //Remove the bomb from the `bombLayer` group\n          g.remove(bomb);\n          return false;\n        } else {\n          return true;\n        }\n      });\n\n      //Confirm the new arrays\n      /*\n      console.log(\"bombMapArray\");\n      console.log(bombMapArray);\n      console.log(\"alienMapArray\");\n      console.log(alienMapArray);\n      console.log(\"***\");\n      */\n    }\n  });\n\n  //Display the alien's x, y and index values\n  message.content = `centerX: ${alien.centerX} centerY: ${alien.centerY} index: ${alien.index}`;;\n}\n\n//Change direction helper function\nfunction changeDirection(sprite) {\n  let up = 1,\n    down = 2,\n    left = 3,\n    right = 4,\n    direction = g.randomInt(1, 4);\n\n  switch (direction) {\n    case right:\n      sprite.vx = 2;\n      sprite.vy = 0;\n      break;\n\n    case left:\n      sprite.vx = -2;\n      sprite.vy = 0;\n      break;\n\n    case up:\n      sprite.vx = 0;\n      sprite.vy = -2;\n      break;\n\n    case down:\n      sprite.vx = 0;\n      sprite.vy = 2;\n      break;\n  }\n}"]}