{"version":3,"sources":["../src/usingCornerPoints.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,GAAG,CACjB,0BAA0B,EAC1B,mBAAmB,EACnB,2BAA2B,CAC5B;;;AAAC,AAGF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC;;;;AAAC,AAI5C,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,IAAI,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAClC,UAAU,EAAE,SAAS,EAAE,OAAO,EAC9B,YAAY,EAAE,WAAW,EAAE,SAAS;;;AAAC,AAGvC,SAAS,KAAK,GAAG;;;AAGf,OAAK,GAAG,CAAC,CAAC,cAAc,CACtB,2BAA2B,EAC3B,0BAA0B,CAC3B;;;AAAC,AAGF,OAAK,GAAG,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;;;;AAAC,AAIjC,WAAS,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;;;;AAAC,AAIzC,cAAY,GAAG,SAAS,CAAC,IAAI;;;;;;AAAC,AAM9B,aAAW,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;;;;;;;;;;AAAC,AAUvC,SAAO,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AACrD,SAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC;;;AAAC,AAG5B,WAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC3B,SAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACzB,YAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC5B,WAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;;;AAAC,AAG3B,OAAK,CAAC,SAAS,GAAG,EAAE,CAAC;AACrB,WAAS,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;AACjD,SAAO,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;AAC7C,YAAU,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;AACnD,WAAS,CAAC,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,GAAG,MAAM;;;AAAC,AAGjD,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;;AAId,MAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,KAAK,CAAC,EAAE;AAC/F,YAAQ,KAAK,CAAC,SAAS;AACrB,WAAK,IAAI;AACP,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACd,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,MAAM;AACT,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,MAAM;AACT,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACd,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,AACR,WAAK,OAAO;AACV,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,aAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,cAAM;AAAA,KACT;GACF;;;AAAA,AAGD,OAAK,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;AACpB,OAAK,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;;;;AAAC,AAIpB,GAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;;AAE1B,MAAI,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC;;;;;AAAC,AAKxE,MAAI,WAAW,CAAC,GAAG,EAAE;;;;AAInB,eAAW,GAAG,WAAW,CAAC,MAAM,CAAC,AAAC,IAAI,IAAK;;;AAGzC,UAAI,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE;;;;AAIpC,oBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;;;AAAC,AAG7B,SAAC,CAAC,MAAM,CAAC,IAAI,CAAC;;;;;;AAAC,AAMf,eAAO,CAAC,GAAG,CAAC,YAAY,CAAC;;;AAAC,AAG1B,eAAO,KAAK,CAAC;OACd,MAAM;;;AAGL,eAAO,IAAI,CAAC;OACb;KACF,CAAC,CAAC;GACJ;;;AAAA,AAGD,SAAO,CAAC,OAAO,GAAG,CAAC,SAAS,GAAE,KAAK,CAAC,OAAO,EAAC,UAAU,GAAE,KAAK,CAAC,OAAO,EAAC,QAAQ,GAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;CAChG","file":"usingCornerPoints.js","sourcesContent":["let thingsToLoad = [\n  \"images/timeBombPanic.png\",\n  \"fonts/puzzler.otf\",\n  \"maps/simpleCollision.json\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Start Hexi\ng.start();\n\n//Game variables\nlet world, alien, leftArrow, upArrow,\n  rightArrow, downArrow, message,\n  bombMapArray, bombSprites, bombLayer;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make the world from the Tiled JSON data and the tileset PNG image\n  world = g.makeTiledWorld(\n    \"maps/simpleCollision.json\",\n    \"images/timeBombPanic.png\"\n  );\n\n  //Create the `alien` sprite\n  alien = world.getObject(\"alien\");\n\n  //Get a reference to the bomb layer. \n  //\"bombLayer\" is the name of the bomb layer in Tiled Editor\n  bombLayer = world.getObject(\"bombLayer\");\n\n  //Get a reference to the level's bomb layer array. This is the\n  //bomb layer's `data` array from the tiledMap JSON file\n  bombMapArray = bombLayer.data;\n\n  //Get a reference to all the bomb sprites in the world. \"bomb\" is\n  //the `name` property of the bomb image in the tileset.\n  //`world.getObjects` returns an array of all the sprites that have\n  //that same `name`\n  bombSprites = world.getObjects(\"bomb\");\n\n  //Alternatively, you can clone the `bombLayer` container's\n  //`children` array\n  //bombSprites = bombLayer.children.slice();\n\n  //Possible ES6 way of doing it:\n  //bombSprites = Array.from(bomblayer.children);\n\n  //Make a text object\n  message = g.text(\"testing\", \"12px puzzler\", \"black\");\n  message.setPosition(10, 10);\n\n  //Create the keyboard objects\n  leftArrow = g.keyboard(37);\n  upArrow = g.keyboard(38);\n  rightArrow = g.keyboard(39);\n  downArrow = g.keyboard(40);\n\n  //Assign the key `press` actions\n  alien.direction = \"\";\n  leftArrow.press = () => alien.direction = \"left\";\n  upArrow.press = () => alien.direction = \"up\";\n  rightArrow.press = () => alien.direction = \"right\";\n  downArrow.press = () => alien.direction = \"down\";\n\n  //Change the game state to `play`\n  g.state = play;\n}\n\n//The `play` function contains all the game logic and runs in a loop\nfunction play() {\n\n  //Move the alien and keep it contained within the canvas\n  //Change the alien's direction only if it's at an interesection\n  if (Math.floor(alien.x) % world.tilewidth === 0 && Math.floor(alien.y) % world.tileheight === 0) {\n    switch (alien.direction) {\n      case \"up\":\n        alien.vy = -4;\n        alien.vx = 0;\n        break;\n      case \"down\":\n        alien.vy = 4;\n        alien.vx = 0;\n        break;\n      case \"left\":\n        alien.vx = -4;\n        alien.vy = 0;\n        break;\n      case \"right\":\n        alien.vx = 4;\n        alien.vy = 0;\n        break;\n    }\n  }\n\n  //Move the alien\n  alien.x += alien.vx;\n  alien.y += alien.vy;\n\n  //Keep the alien contained inside the canvas\n  //(The `contain` method is in library/collision)\n  g.contain(alien, g.stage);\n\n  let alienVsBomb = g.hitTestTile(alien, bombMapArray, 5, world, \"every\");\n\n  //if (alienVsBomb.hit) console.log(\"hit!\");\n\n  //Find out if the alien's position in the bomb array matches a bomb gid number\n  if (alienVsBomb.hit) {\n\n    //If it does, filter through the bomb sprites and find the one\n    //that matches the alien's position\n    bombSprites = bombSprites.filter((bomb) => {\n\n      //Does the bomb sprite have the same index number as the alien?\n      if (bomb.index === alienVsBomb.index) {\n\n        //If it does, remove the bomb from the \n        //`bombMapArray` by setting its gid to `0`\n        bombMapArray[bomb.index] = 0;\n\n        //Remove the bomb sprite from its container group\n        g.remove(bomb);\n\n        //Alternatively, remove the bomb with `removeChild` on\n        //the `bombLayer` group\n        //bombLayer.removeChild(bomb);\n        //Confirm the array data\n        console.log(bombMapArray);\n\n        //Filter the bomb out of the `bombSprites` array\n        return false;\n      } else {\n\n        //Keep the bomb in the `bombSprites` array if it doesn't match\n        return true;\n      }\n    });\n  }\n\n  //Display the alien's x, y and index values\n  message.content = `centerX: ${alien.centerX} centerY: ${alien.centerY} index: ${alien.index}`;;\n}"]}