{"version":3,"sources":["../src/aiDrivingGame.js"],"names":[],"mappings":"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","file":"aiDrivingGame.js","sourcesContent":["let thingsToLoad = [\n  \"images/tileSet.png\",\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(640, 512, setup, thingsToLoad);\n\n//Scale the canvas to the maximum browser dimensions\ng.scaleToWindow();\n\n//Start Hexi\ng.start();\n\n//Intiialize variables\nlet car, world, aiCar, previousMapAngle, targetAngle;\n\nfunction setup() {\n\n  //Create the `world` container that defines our\n  //tile-based world\n  world = g.group();\n\n  //Set the `tileWidth` and `tileHeight` of each tile, in pixels\n  world.tileWidth = 64;\n  world.tileHeight = 64;\n\n  //Define the width and height of the world, in tiles\n  world.widthInTiles = 10;\n  world.heightInTiles = 8;\n\n  //Create the world layers\n  world.layers = [\n\n    //The environment layer. `2` represents the walls,\n    //`1` represents the floors\n    [\n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 1, 1, 1, 1, 2, 2, 1,\n      1, 2, 2, 1, 1, 1, 1, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    ],\n\n    //The character layer. `3` represents the player's car,\n    //`4` represents the AI car and\n    //`0` represents an empty cell which won't contain any\n    //sprites\n    [\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 3, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 4, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ],\n\n    //Angles map\n    [\n      45, 45, 45, 45, 45, 45, 45, 45, 135, 135,\n      315, 0, 0, 0, 0, 0, 0, 90, 135, 135,\n      315, 0, 0, 0, 0, 0, 0, 90, 135, 135,\n      315, 315, 270, 315, 315, 315, 315, 90, 90, 135,\n      315, 315, 270, 135, 135, 135, 135, 90, 90, 135,\n      315, 315, 270, 180, 180, 180, 180, 180, 180, 135,\n      315, 315, 270, 180, 180, 180, 180, 180, 180, 135,\n      315, 270, 270, 225, 225, 225, 225, 225, 225, 225\n    ]\n\n  ];\n\n  //Build the game world by looping through each \n  //of the layers arrays one after the other\n  world.layers.forEach(layer => {\n\n    //Loop through each array element\n    layer.forEach((gid, index) => {\n\n      //If the cell isn't empty (0) then create a sprite\n      if (gid !== 0) {\n\n        //Find the column and row that the sprite is on and also\n        //its x and y pixel values that match column and row position\n        let column, row, x, y;\n        column = index % world.widthInTiles;\n        row = Math.floor(index / world.widthInTiles);\n        x = column * world.tileWidth;\n        y = row * world.tileHeight;\n\n        //Next, create a different sprite based on what its \n        //`gid` number is\n        let sprite;\n        switch (gid) {\n\n          //The track\n          case 1:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 64, 64, 64));\n            break;\n\n            //The grass\n          case 2:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 0, 64, 64));\n            break;\n\n            //The player's car \n          case 3:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 192, 48, 48));\n            car = sprite;\n            break;\n\n            //The AI car \n          case 4:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 128, 48, 48));\n            aiCar = sprite;\n        }\n\n\n        if (sprite) {\n\n          //Position the sprite using the calculated `x` and `y` values\n          //that match its column and row in the tile map\n          sprite.x = x;\n          sprite.y = y;\n\n          //Add the sprite to the `world` container\n          world.addChild(sprite);\n        }\n\n      }\n    });\n  });\n\n  //A function to add physics properties to the cars\n  let addCarProperties = carSprite => {\n    carSprite.vx = 0;\n    carSprite.vy = 0;\n    carSprite.accelerationX = 0.2;\n    carSprite.accelerationY = 0.2;\n    carSprite.rotationSpeed = 0;\n    carSprite.friction = 0.96;\n    carSprite.speed = 0;\n\n    //Center the car's rotation point\n    carSprite.setPivot(0.5, 0.5);\n\n    //Whether or not the car should move forward\n    carSprite.moveForward = false;\n  };\n\n  //Add physics properties to the player's car\n  addCarProperties(car);\n\n  //Add physics properties and set it to move forward\n  //when the game begins\n  addCarProperties(aiCar);\n  aiCar.moveForward = true;\n\n  //Define the arrow keys to move the car\n  let leftArrow = g.keyboard(37),\n    upArrow = g.keyboard(38),\n    rightArrow = g.keyboard(39),\n    downArrow = g.keyboard(40);\n\n  //Set the car's `rotationSpeed` to -0.1 (to rotate left) if the\n  //left arrow key is being pressed\n  leftArrow.press = () => {\n    car.rotationSpeed = -0.05;\n  };\n\n  //If the left arrow key is released and the right arrow\n  //key isn't being pressed down, set the `rotationSpeed` to 0\n  leftArrow.release = () => {\n    if (!rightArrow.isDown) car.rotationSpeed = 0;\n  };\n\n  //Do the same for the right arrow key, but set\n  //the `rotationSpeed` to 0.1 (to rotate right)\n  rightArrow.press = () => {\n    car.rotationSpeed = 0.05;\n  };\n\n  rightArrow.release = () => {\n    if (!leftArrow.isDown) car.rotationSpeed = 0;\n  };\n\n  //Set `car.moveForward` to `true` if the up arrow key is\n  //pressed, and set it to `false` if it's released\n  upArrow.press = () => {\n    car.moveForward = true;\n  };\n  upArrow.release = () => {\n    car.moveForward = false;\n  };\n\n  //Start the game loop by setting the game state to `play`\n  g.state = play;\n\n}\n\n//The game loop\nfunction play() {\n\n  //Move the AI car\n\n  //If `aICar.moveForward` is `true`, increase the speed as long\n  //it is under the maximum speed limit of 3\n  if (aiCar.moveForward && aiCar.speed <= 3) {\n    aiCar.speed += 0.08;\n  }\n\n  //Find the AI car's current angle, in degrees\n  let currentAngle = aiCar.rotation * (180 / Math.PI);\n\n  //Constrain the calculated angle to a value between 0 and 360\n  currentAngle = currentAngle + Math.ceil(-currentAngle / 360) * 360;\n\n  //Find out its index position on the map\n  let aiCarIndex = getIndex(aiCar.x, aiCar.y, 64, 64, 10);\n\n  //Find out what the target angle is for that map position\n  let angleMap = world.layers[2];\n  let mapAngle = angleMap[aiCarIndex];\n\n  //Add an optional random variation of 20 degrees each time the aiCar\n  //encounters a new map angle\n  if (mapAngle !== previousMapAngle) {\n    targetAngle = mapAngle + randomInt(-20, 20);\n    previousMapAngle = mapAngle;\n  }\n\n  //If you don't want any random variation in the iaCar's angle\n  //replace the above if statement with this line of code:\n  //targetAngle = mapAngle;\n\n  //Calculate the difference between the current \n  //angle and the target angle\n  let difference = currentAngle - targetAngle;\n\n  //Figure out whether to turn the car left or right\n  if (difference > 0 && difference < 180) {\n\n    //Turn left\n    aiCar.rotationSpeed = -0.03;\n  } else {\n\n    //Turn right\n    aiCar.rotationSpeed = 0.03;\n  }\n\n  //Use the `rotationSpeed` to set the car's rotation\n  aiCar.rotation += aiCar.rotationSpeed;\n\n  //Use the `speed` value to figure out the acceleration in the\n  //direction of the aiCar’s rotation\n  aiCar.accelerationX = aiCar.speed * Math.cos(aiCar.rotation);\n  aiCar.accelerationY = aiCar.speed * Math.sin(aiCar.rotation);\n\n  //Apply the acceleration and friction to the aiCar's velocity\n  aiCar.vx = aiCar.accelerationX\n  aiCar.vy = aiCar.accelerationY\n  aiCar.vx *= aiCar.friction;\n  aiCar.vy *= aiCar.friction;\n\n  //Apply the aiCar's velocity to its position to make the aiCar move\n  aiCar.x += aiCar.vx;\n  aiCar.y += aiCar.vy;\n\n  //Move the player's car\n\n  //Use the `rotationSpeed` to set the car's rotation\n  car.rotation += car.rotationSpeed;\n\n  //If `car.moveForward` is `true`, increase the speed\n  if (car.moveForward) {\n    car.speed += 0.05;\n  }\n\n  //If `car.moveForward` is `false`, use \n  //friction to slow the car down\n  else {\n    car.speed *= car.friction;\n  }\n\n  //Use the `speed` value to figure out the acceleration in the\n  //direction of the car’s rotation\n  car.accelerationX = car.speed * Math.cos(car.rotation);\n  car.accelerationY = car.speed * Math.sin(car.rotation);\n\n  //Apply the acceleration and friction to the car's velocity\n  car.vx = car.accelerationX\n  car.vy = car.accelerationY\n  car.vx *= car.friction;\n  car.vy *= car.friction;\n\n  //Apply the car's velocity to its position to make the car move\n  car.x += car.vx;\n  car.y += car.vy;\n\n  //Slow the cars down if they're stuck in the grass\n\n  //First find the car's map index position\n  let carIndex = getIndex(car.x, car.y, 64, 64, 10);\n\n  //Get a reference to the race track map\n  let trackMap = world.layers[0];\n\n  //Slow the car if it's on a grass tile (gid 1) by setting\n  //the car's friction to 0.25, to make it sluggish\n  if (trackMap[carIndex] === 1) {\n    car.friction = 0.25;\n\n    //If the car isn't on a grass tile, restore its\n    //original friction value  \n  } else {\n    car.friction = 0.96;\n  }\n\n  //Slow the aiCar if it's on a grass tile (gid 1) by setting\n  //its friction to 0.25, to make it sluggish\n  if (trackMap[aiCarIndex] === 1) {\n    aiCar.friction = 0.25;\n\n    //If the car isn't on a grass tile, restore its\n    //original friction value  \n  } else {\n    aiCar.friction = 0.96;\n  }\n}\n\n//Helper functions\nfunction isCenteredOverCell(sprite) {\n  return Math.floor(sprite.x) % world.tilewidth === 0 && Math.floor(sprite.y) % world.tileheight === 0\n}\n\n//The `randomInt` helper function returns a random integer between a minimum\n//and maximum value\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n//The `getIndex` helper method\n//converts a sprite's x and y position to an array index number.\n//It returns a single index value that tells you the map array\n//index number that the sprite is in\nfunction getIndex(x, y, tilewidth, tileheight, mapWidthInTiles) {\n  let index = {};\n\n  //Convert pixel coordinates to map index coordinates\n  index.x = Math.floor(x / tilewidth);\n  index.y = Math.floor(y / tileheight);\n\n  //Return the index number\n  return index.x + (index.y * mapWidthInTiles);\n}"]}