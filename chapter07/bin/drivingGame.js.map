{"version":3,"sources":["../src/drivingGame.js"],"names":[],"mappings":"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","file":"drivingGame.js","sourcesContent":["let thingsToLoad = [\n  \"images/tileSet.png\",\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(640, 512, setup, thingsToLoad);\n\n//Scale the canvas to the maximum browser dimensions\ng.scaleToWindow();\n\n//Start Hexi\ng.start();\n\n//Intiialize variables\nlet car, world;\n\nfunction setup() {\n\n  //Create the `world` container that defines our isometric \n  //tile-based world\n  world = g.group();\n\n  //Set the `tileWidth` and `tileHeight` of each tile, in pixels\n  world.tileWidth = 64;\n  world.tileHeight = 64;\n\n  //Define the width and height of the world, in tiles\n  world.widthInTiles = 10;\n  world.heightInTiles = 8;\n\n  //Create the world layers\n  world.layers = [\n\n    //The environment layer. `2` represents the walls,\n    //`1` represents the floors\n    [\n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 1, 1, 1, 1, 2, 2, 1,\n      1, 2, 2, 1, 1, 1, 1, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 2, 2, 2, 2, 2, 2, 2, 2, 1,\n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    ],\n\n    //The character layer. `3` represents the game character\n    //`0` represents an empty cell which won't contain any\n    //sprites\n    [\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 3, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    ]\n  ];\n\n  //Build the game world by looping through each \n  //of the layers arrays one after the other\n  world.layers.forEach(layer => {\n\n    //Loop through each array element\n    layer.forEach((gid, index) => {\n\n      //If the cell isn't empty (0) then create a sprite\n      if (gid !== 0) {\n\n        //Find the column and row that the sprite is on and also\n        //its x and y pixel values that match column and row position\n        let column, row, x, y;\n        column = index % world.widthInTiles;\n        row = Math.floor(index / world.widthInTiles);\n        x = column * world.tileWidth;\n        y = row * world.tileHeight;\n\n        //Next, create a different sprite based on what its \n        //`gid` number is\n        let sprite;\n        switch (gid) {\n\n          //The track\n          case 1:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 64, 64, 64));\n            break;\n\n            //The grass\n          case 2:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 0, 64, 64));\n            break;\n\n            //The car \n          case 3:\n            sprite = g.sprite(g.frame(\"images/tileSet.png\", 192, 192, 48, 48));\n            car = sprite;\n        }\n\n        //Position the sprite using the calculated `x` and `y` values\n        //that match its column and row in the tile map\n        sprite.x = x;\n        sprite.y = y;\n\n        //Add the sprite to the `world` container\n        world.addChild(sprite);\n      }\n    });\n  });\n\n  //Add some physics properties to the car\n  car.vx = 0;\n  car.vy = 0;\n  car.accelerationX = 0.2;\n  car.accelerationY = 0.2;\n  car.rotationSpeed = 0;\n  car.friction = 0.96;\n  car.speed = 0;\n\n  //Center the car's rotation point\n  car.setPivot(0.5, 0.5);\n\n  //Whether or not the car should move forward\n  car.moveForward = false;\n\n  //Define the arrow keys to move the car\n  let leftArrow = g.keyboard(37),\n    upArrow = g.keyboard(38),\n    rightArrow = g.keyboard(39),\n    downArrow = g.keyboard(40);\n\n  //Set the car's `rotationSpeed` to -0.1 (to rotate left) if the\n  //left arrow key is being pressed\n  leftArrow.press = () => {\n    car.rotationSpeed = -0.05;\n  };\n\n  //If the left arrow key is released and the right arrow\n  //key isn't being pressed down, set the `rotationSpeed` to 0\n  leftArrow.release = () => {\n    if (!rightArrow.isDown) car.rotationSpeed = 0;\n  };\n\n  //Do the same for the right arrow key, but set\n  //the `rotationSpeed` to 0.1 (to rotate right)\n  rightArrow.press = () => {\n    car.rotationSpeed = 0.05;\n  };\n\n  rightArrow.release = () => {\n    if (!leftArrow.isDown) car.rotationSpeed = 0;\n  };\n\n  //Set `car.moveForward` to `true` if the up arrow key is\n  //pressed, and set it to `false` if it's released\n  upArrow.press = () => {\n    car.moveForward = true;\n  };\n  upArrow.release = () => {\n    car.moveForward = false;\n  };\n\n  //Start the game loop by setting the game state to `play`\n  g.state = play;\n}\n\n//The game loop\nfunction play() {\n\n  //Use the `rotationSpeed` to set the car's rotation\n  car.rotation += car.rotationSpeed;\n\n  //If `car.moveForward` is `true`, increase the speed\n  if (car.moveForward) {\n    car.speed += 0.05;\n  }\n\n  //If `car.moveForward` is `false`, use \n  //friction to slow the car down\n  else {\n    car.speed *= car.friction;\n  }\n\n  //Use the `speed` value to figure out the acceleration in the\n  //direction of the car’s rotation\n  car.accelerationX = car.speed * Math.cos(car.rotation);\n  car.accelerationY = car.speed * Math.sin(car.rotation);\n\n  //Apply the acceleration and friction to the car's velocity\n  car.vx = car.accelerationX\n  car.vy = car.accelerationY\n  car.vx *= car.friction;\n  car.vy *= car.friction\n\n  //Apply the car's velocity to its position to make the car move\n  car.x += car.vx;\n  car.y += car.vy;\n\n  //Slow the car down if it's stuck in the grass\n\n  //First find the car's map index position\n  let carIndex = getIndex(car.x, car.y, 64, 64, 10);\n\n  //Get a reference to the race track map\n  let trackMap = world.layers[0];\n\n  //Slow the car if it's on a grass tile (gid 1) by setting\n  //the car's friction to 0.25, to make it sluggish\n  if (trackMap[carIndex] === 1) {\n    car.friction = 0.25;\n\n    //If the car isn't on a grass tile, restore its\n    //original friction value  \n  } else {\n    car.friction = 0.96\n  }\n\n}\n\n//Helper functions\n\n//The `getIndex` helper method\n//converts a sprite's x and y position to an array index number.\n//It returns a single index value that tells you the map array\n//index number that the sprite is in\nfunction getIndex(x, y, tilewidth, tileheight, mapWidthInTiles) {\n  let index = {};\n\n  //Convert pixel coordinates to map index coordinates\n  index.x = Math.floor(x / tilewidth);\n  index.y = Math.floor(y / tileheight);\n\n  //Return the index number\n  return index.x + (index.y * mapWidthInTiles);\n}"]}