{"version":3,"sources":["../src/depthLayering.js"],"names":[],"mappings":";AACA,IAAI,YAAY,GAAG,CAAC,uBAAuB,CAAC;;;AAAC,AAG7C,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC;;;AAAC,AAG5C,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,EAC3B,UAAU,EAAE,SAAS,EAAE,OAAO,EAC9B,MAAM,EAAE,WAAW,EAAE,YAAY;;;AAAC,AAGpC,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEV,SAAS,KAAK,GAAG;;;;AAIf,OAAK,GAAG,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGlB,OAAK,CAAC,aAAa,GAAG,EAAE,CAAC;AACzB,OAAK,CAAC,cAAc,GAAG,EAAE;;;AAAC,AAG1B,OAAK,CAAC,YAAY,GAAG,CAAC,CAAC;AACvB,OAAK,CAAC,aAAa,GAAG,CAAC;;;AAAC,AAGxB,OAAK,CAAC,MAAM,GAAG;;;AAGb,GACE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvB;;;AAGD,GACE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvB;;;AAGD,GACE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,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","file":"depthLayering.js","sourcesContent":["//The images we want to load\nlet thingsToLoad = [\"images/isoTileset.png\"];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\n\n//Scale the canvas to the maximum browser dimensions\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet world, leftArrow, upArrow,\n  rightArrow, downArrow, message,\n  player, groundLayer, wallMapArray;\n\n//Start Hexi\ng.start();\n\nfunction setup() {\n\n  //Create the `world` container that defines our isometric \n  //tile-based world\n  world = g.group();\n\n  //Set the `tileWidth` and `tileHeight` of each tile, in pixels\n  world.cartTilewidth = 32;\n  world.cartTileheight = 32;\n\n  //Define the width and height of the world, in tiles\n  world.widthInTiles = 8;\n  world.heightInTiles = 8;\n\n  //Create the world layers\n  world.layers = [\n\n    //The floor layer\n    [\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1,\n      1, 1, 1, 1, 1, 1, 1, 1\n    ],\n\n    //The wall layer\n    [\n      2, 2, 2, 2, 2, 2, 2, 2,\n      2, 0, 0, 0, 0, 0, 0, 2,\n      2, 0, 2, 0, 0, 2, 0, 2,\n      2, 0, 0, 0, 0, 2, 2, 2,\n      2, 0, 0, 0, 0, 0, 0, 2,\n      2, 2, 2, 0, 2, 0, 0, 2,\n      2, 0, 0, 0, 0, 0, 0, 2,\n      2, 2, 2, 2, 2, 2, 2, 2\n    ],\n\n    //The player layer\n    [\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 3, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0\n    ]\n  ];\n\n  //The `z` index\n  let z = 0;\n\n  //Build the game world by looping through each of the arrays\n  world.layers.forEach(layer => {\n\n    //Loop through each array element\n    layer.forEach((gid, index) => {\n\n      //If the cell isn't empty (0) then create a sprite\n      if (gid !== 0) {\n\n        //Find the column and row that the sprite is on and also\n        //its x and y pixel values.\n        let column, row, x, y;\n        column = index % world.widthInTiles;\n        row = Math.floor(index / world.widthInTiles);\n        x = column * world.cartTilewidth;\n        y = row * world.cartTileheight;\n\n        //Next, create a different sprite based on what its \n        //`gid` number is\n        let sprite;\n        switch (gid) {\n\n          //The floor\n          case 1:\n            sprite = g.sprite(g.frame(\"images/isoTileset.png\", 128, 0, 64, 64));\n            break;\n\n            //The walls\n          case 2:\n            sprite = g.sprite(g.frame(\"images/isoTileset.png\", 0, 0, 64, 64));\n            break;\n\n            //The player\n          case 3:\n            sprite = g.sprite(g.frame(\"images/isoTileset.png\", 64, 0, 64, 64));\n            player = sprite;\n            break;\n        }\n\n\n        //Add these properties to the sprite\n        addIsoProperties(sprite, x, y, world.cartTilewidth, world.cartTileheight);\n\n        //Set the sprite's `x` and `y` pixel position based on its\n        //isometric coordinates\n        sprite.x = sprite.isoX;\n        sprite.y = sprite.isoY;\n\n        //Add the new `z` depth property to the sprite\n        sprite.z = z;\n\n        //Cartesian positioning\n        //sprite.x = sprite.cartX;\n        //sprite.y = sprite.cartY;\n\n        //Add the sprite to the `world` container\n        world.addChild(sprite);\n      }\n    });\n\n    //Add `1` to `z` for each new layer  \n    z += 1;\n  });\n\n  //Move the player into the environment's depth layer\n  player.z = 1;\n\n  //Sort the world by depth\n  world.children.sort(byDepth);\n\n  //Position the world inside the canvas\n  let canvasOffset = (g.canvas.width / 2) - world.cartTilewidth;\n  world.x += canvasOffset;\n  world.y = 0;\n\n  //Make a text object\n  message = g.text(\"\", \"16px Futura\", \"black\");\n  message.setPosition(5, 0);\n\n  //Add isometric properties to the pointer\n  makeIsoPointer(g.pointer, world);\n\n  //Create the keyboard objects\n  leftArrow = g.keyboard(37);\n  upArrow = g.keyboard(38);\n  rightArrow = g.keyboard(39);\n  downArrow = g.keyboard(40);\n\n  //Assign the key `press` actions\n  player.direction = \"none\";\n  leftArrow.press = () => player.direction = \"left\";\n  upArrow.press = () => player.direction = \"up\";\n  rightArrow.press = () => player.direction = \"right\";\n  downArrow.press = () => player.direction = \"down\";\n  leftArrow.release = () => player.direction = \"none\";\n  upArrow.release = () => player.direction = \"none\";\n  rightArrow.release = () => player.direction = \"none\";\n  downArrow.release = () => player.direction = \"none\";\n\n  //Set the game state to `play`\n  g.state = play;\n}\n\nfunction play() {\n\n  //Change the player character's velocity if it's centered over a grid cell\n  if (Math.floor(player.cartX) % world.cartTilewidth === 0 && Math.floor(player.cartY) % world.cartTileheight === 0) {\n    switch (player.direction) {\n      case \"up\":\n        player.vy = -2;\n        player.vx = 0;\n        break;\n      case \"down\":\n        player.vy = 2;\n        player.vx = 0;\n        break;\n      case \"left\":\n        player.vx = -2;\n        player.vy = 0;\n        break;\n      case \"right\":\n        player.vx = 2;\n        player.vy = 0;\n        break;\n      case \"none\":\n        player.vx = 0;\n        player.vy = 0;\n        break;\n    }\n  }\n\n  //Update the player's Cartesian position \n  //based on its velocity\n  player.cartY += player.vy;\n  player.cartX += player.vx;\n\n  //Wall collision\n  //Get a reference to the wall map array\n  wallMapArray = world.layers[1];\n\n  //Use `hiteTestIsoTile` to check for a collision\n  let playerVsGround = hitTestIsoTile(player, wallMapArray, 0, world, \"every\");\n\n  //If there's a collision, prevent the player from moving.\n  //Subtract its velocity from its position and then set its velocity to zero\n  if (!playerVsGround.hit) {\n    player.cartX -= player.vx;\n    player.cartY -= player.vy;\n    player.vx = 0;\n    player.vy = 0;\n  }\n\n  //Add world boundaries\n  let top = 0,\n    bottom = (world.heightInTiles * world.cartTileheight),\n    left = 0,\n    right = (world.widthInTiles * world.cartTilewidth);\n\n  //Prevent the player from crossing any of the world boundaries\n  //Top\n  if (player.cartY < 0) {\n    player.cartY = top;\n  }\n\n  //Bottom\n  if (player.cartY + player.cartHeight > bottom) {\n    player.cartY = bottom - player.cartHeight;\n  }\n\n  //Left\n  if (player.cartX < left) {\n    player.cartX = left;\n  }\n\n  //Right\n  if (player.cartX + player.cartWidth > right) {\n    player.cartX = right - player.cartWidth;\n  }\n\n  //Position the sprite's sceen `x` and `y` position\n  //using its isometric coordinates\n  player.x = player.isoX;\n  player.y = player.isoY;\n\n  //Get the player's index position in the map array\n  player.index = g.getIndex(\n    player.cartX, player.cartY,\n    world.cartTilewidth, world.cartTileheight, world.widthInTiles\n  );\n\n  //Depth sort the sprites if the player is moving\n  if (player.vx !== 0 || player.vy !== 0) {\n    world.children.sort(byDepth);\n  }\n\n  //Display the player's x, y and index values\n  message.content = `index: ${player.index}`;\n}\n\n//Helper functions\n\nfunction byDepth(a, b) {\n  //Calculate the depths of `a` and `b`\n  //(add `1` to `a.z` and `b.x` to avoid multiplying by 0)\n  a.depth = (a.cartX + a.cartY) * (a.z + 1);\n  b.depth = (b.cartX + b.cartY) * (b.z + 1);\n\n  //Move sprites with a lower depth to a higher position in the array\n  if (a.depth < b.depth) {\n    return -1;\n  } else if (a.depth > b.depth) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nfunction hitTestIsoTile(sprite, mapArray, gidToCheck, world, pointsToCheck) {\n\n  //The `checkPoints` helper function Loop through the sprite's corner points to \n  //find out if they are inside an array cell that you're interested in. \n  //Return `true` if they are\n  let checkPoints = key => {\n\n    //Get a reference to the current point to check.\n    //(`topLeft`, `topRight`, `bottomLeft` or `bottomRight` )\n    let point = sprite.collisionPoints[key];\n\n    //Find the point's index number in the map array\n    collision.index = g.getIndex(\n      point.x, point.y,\n      world.cartTilewidth, world.cartTileheight, world.widthInTiles\n    );\n\n    //Find out what the gid value is in the map position\n    //that the point is currently over\n    collision.gid = mapArray[collision.index];\n\n    //If it matches the value of the gid that we're interested, in\n    //then there's been a collision\n    if (collision.gid === gidToCheck) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  //Assign \"some\" as the default value for `pointsToCheck`\n  pointsToCheck = pointsToCheck || \"some\";\n\n  //The collision object that will be returned by this function\n  let collision = {};\n\n  //Which points do you want to check?\n  //\"every\", \"some\" or \"center\"?\n  switch (pointsToCheck) {\n    case \"center\":\n\n      //`hit` will be true only if the center point is touching\n      let point = {\n        center: {\n          //x: sprite.centerX,\n          //y: sprite.centerY\n          x: s.cartX + ca.x + (ca.width / 2),\n          y: s.cartY + ca.y + (ca.height / 2)\n        }\n      };\n      sprite.collisionPoints = point;\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints);\n      break;\n    case \"every\":\n\n      //`hit` will be true if every point is touching\n      sprite.collisionPoints = getIsoPoints(sprite);\n      collision.hit = Object.keys(sprite.collisionPoints).every(checkPoints);\n      break;\n    case \"some\":\n\n      //`hit` will be true only if some points are touching\n      sprite.collisionPoints = getIsoPoints(sprite);\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints);\n      break;\n  }\n\n  //Return the collision object.\n  //`collision.hit` will be true if a collision is detected.\n  //`collision.index` tells you the map array index number where the\n  //collision occured\n  return collision;\n}\n\nfunction getIsoPoints(s) {\n  let ca = s.collisionArea;\n  if (ca !== undefined) {\n    return {\n      topLeft: {\n        x: s.cartX + ca.x,\n        y: s.cartY + ca.y\n      },\n      topRight: {\n        x: s.cartX + ca.x + ca.width,\n        y: s.cartY + ca.y\n      },\n      bottomLeft: {\n        x: s.cartX + ca.x,\n        y: s.cartY + ca.y + ca.height\n      },\n      bottomRight: {\n        x: s.cartX + ca.x + ca.width,\n        y: s.cartY + ca.y + ca.height\n      }\n    };\n  } else {\n    return {\n      topLeft: {\n        x: s.cartX,\n        y: s.cartY\n      },\n      topRight: {\n        x: s.cartX + s.cartWidth - 1,\n        y: s.cartY\n      },\n      bottomLeft: {\n        x: s.cartX,\n        y: s.cartY + s.cartHeight - 1\n      },\n      bottomRight: {\n        x: s.cartX + s.cartWidth - 1,\n        y: s.cartY + s.cartHeight - 1\n      }\n    };\n  }\n}\n\n\n//Create some useful properties on the pointer\nfunction makeIsoPointer(pointer, world) {\n  Object.defineProperties(pointer, {\n\n    //The isometric's world's Cartesian coordiantes\n    cartX: {\n      get() {\n        return (((2 * this.cartY + this.cartX) - (2 * world.y + world.x)) / 2) - (world.cartTilewidth / 2);\n      },\n      enumerable: true,\n      configurable: true\n    },\n    cartY: {\n      get() {\n        return (((2 * this.cartY - this.cartX) - (2 * world.y - world.x)) / 2) + (world.cartTileheight / 2);\n      },\n      enumerable: true,\n      configurable: true\n    },\n\n    //The tile's column and row in the array\n    column: {\n      get() {\n        return Math.floor(this.cartX / world.cartTilewidth);\n      },\n      enumerable: true,\n      configurable: true\n    },\n    row: {\n      get() {\n        return Math.floor(this.cartY / world.cartTileheight);\n      },\n      enumerable: true,\n      configurable: true\n    },\n\n    //The tile's index number in the array\n    index: {\n      get() {\n        let index = {};\n\n        //Convert pixel coordinates to map index coordinates\n        index.x = Math.floor(this.cartX / world.cartTilewidth);\n        index.y = Math.floor(this.cartY / world.cartTileheight);\n\n        //Return the index number\n        return index.x + (index.y * world.widthInTiles);\n      },\n      enumerable: true,\n      configurable: true\n    },\n  });\n}\n\n//A function for creating a simple isometric diamond\n//shaped rectangle using Pixi's graphics library\nfunction isoRectangle(width, height, fillStyle) {\n\n  //Figure out the `halfHeight` value\n  let halfHeight = height / 2;\n\n  //Draw the flattened and rotated square (diamond shape)\n  let rectangle = new PIXI.Graphics();\n  rectangle.beginFill(fillStyle);\n  rectangle.moveTo(0, 0);\n  rectangle.lineTo(width, halfHeight);\n  rectangle.lineTo(0, height);\n  rectangle.lineTo(-width, halfHeight);\n  rectangle.lineTo(0, 0);\n  rectangle.endFill();\n\n  //Generate a texture from the rectangle\n  let texture = rectangle.generateTexture();\n\n  //Use the texture to create a sprite \n  let sprite = new PIXI.Sprite(texture);\n\n  //Return it to the main program\n  return sprite;\n}\n\n//Add properties to the sprite to help work between Cartesian\n//and isometric properties\nfunction addIsoProperties(sprite, x, y, width, height) {\n\n  //Cartisian (flat 2D) properties\n  sprite.cartX = x;\n  sprite.cartY = y;\n  sprite.cartWidth = width;\n  sprite.cartHeight = height;\n\n  //Add a getter/setter for the isometric properties\n  Object.defineProperties(sprite, {\n    isoX: {\n      get() {\n        return this.cartX - this.cartY;\n      },\n      enumerable: true,\n      configurable: true\n    },\n    isoY: {\n      get() {\n        return (this.cartX + this.cartY) / 2;\n      },\n      enumerable: true,\n      configurable: true\n    },\n  });\n};\n\n//A function for converting a Cartsian x and y point\n//to an isometric point\n//(This is unused in this example)\nfunction isoPoint(x, y) {\n  let point = {};\n  point.x = x - y;\n  point.y = (x + y) / 2;\n  return point;\n}"]}