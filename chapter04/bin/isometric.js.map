{"version":3,"sources":["../src/isometric.js"],"names":[],"mappings":"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","file":"isometric.js","sourcesContent":["//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup);\n\n//Scale the canvas to the maximum browser dimensions\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet world, player;\n\n//Start Hexi\ng.start();\n\nfunction setup() {\n\n  //Create the `world` container that defines our isometric \n  //tile-based world\n  world = g.group();\n\n  //Set the `tileWidth` and `tileHeight` of each tile, in pixels\n  world.cartTilewidth = 32;\n  world.cartTileheight = 32;\n\n  //Define the width and height of the world, in tiles\n  world.widthInTiles = 8;\n  world.heightInTiles = 8;\n\n  //Create the world layers\n  world.layers = [\n\n    //The environment layer. `2` represents the walls,\n    //`1` represents the floors\n    [\n      2, 2, 2, 2, 2, 2, 2, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 1, 2, 1, 1, 2, 1, 2,\n      2, 1, 1, 1, 1, 2, 2, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 2, 2, 1, 2, 1, 1, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 2, 2, 2, 2, 2, 2, 2\n    ],\n\n    //The character layer. `3` represents the game character\n    //`0` represents an empty cell which won't contain any\n    //sprites\n    [\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 3, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0\n    ]\n  ];\n\n  //Build the game world by looping through each of the arrays\n  world.layers.forEach(layer => {\n\n    //Loop through each array element\n    layer.forEach((gid, index) => {\n\n      //If the cell isn't empty (0) then create a sprite\n      if (gid !== 0) {\n\n        //Find the column and row that the sprite is on and also\n        //its x and y pixel values.\n        let column, row, x, y;\n        column = index % world.widthInTiles;\n        row = Math.floor(index / world.widthInTiles);\n        x = column * world.cartTilewidth;\n        y = row * world.cartTileheight;\n\n        //Next, create a different sprite based on what its \n        //`gid` number is\n        let sprite;\n        switch (gid) {\n\n          //The floor\n          case 1:\n\n            //Create a sprite using an isometric rectangle\n            sprite = isoRectangle(world.cartTilewidth, world.cartTileheight, 0xCCCCFF);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0xCCCCFF);\n            break;\n\n            //The walls\n          case 2:\n            sprite = isoRectangle(world.cartTilewidth, world.cartTileheight, 0x99CC00);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0x99CC00);\n            break;\n\n            //The character  \n          case 3:\n            sprite = isoRectangle(world.cartTilewidth, world.cartTileheight, 0xFF0000);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0xFF0000);\n\n            //Define this sprite as the `player`\n            player = sprite;\n        }\n\n\n        //Add these properties to the sprite\n        addIsoProperties(sprite, x, y, world.cartTilewidth, world.cartTileheight);\n\n        //Set the sprite's `x` and `y` pixel position based on its\n        //isometric coordinates\n        sprite.x = sprite.isoX;\n        sprite.y = sprite.isoY;\n\n        //Cartesian positioning\n        //sprite.x = sprite.cartX;\n        //sprite.y = sprite.cartY;\n\n        //Add the sprite to the `world` container\n        world.addChild(sprite);\n      }\n    });\n  });\n\n  //Position the world inside the canvas\n  let canvasOffset = (g.canvas.width / 2) - world.cartTilewidth;\n  world.x += canvasOffset;\n}\n\n//Helper functions\n\n//A function for creating a simple isometric diamond\n//shaped rectangle using Pixi's graphics library\nfunction isoRectangle(width, height, fillStyle) {\n\n  //Figure out the `halfHeight` value\n  let halfHeight = height / 2;\n\n  //Draw the flattened and rotated square (diamond shape)\n  let rectangle = new PIXI.Graphics();\n  rectangle.beginFill(fillStyle);\n  rectangle.moveTo(0, 0);\n  rectangle.lineTo(width, halfHeight);\n  rectangle.lineTo(0, height);\n  rectangle.lineTo(-width, halfHeight);\n  rectangle.lineTo(0, 0);\n  rectangle.endFill();\n\n  //Generate a texture from the rectangle\n  let texture = rectangle.generateTexture();\n\n  //Use the texture to create a sprite \n  let sprite = new PIXI.Sprite(texture);\n\n  //Return it to the main program\n  return sprite;\n}\n\n//Add properties to the sprite to help work between Cartesian\n//and isometric properties\nfunction addIsoProperties(sprite, x, y, width, height) {\n\n  //Cartisian (flat 2D) properties\n  sprite.cartX = x;\n  sprite.cartY = y;\n  sprite.cartWidth = width;\n  sprite.cartHeight = height;\n\n  //Add a getter/setter for the isometric properties\n  Object.defineProperties(sprite, {\n    isoX: {\n      get() {\n        return this.cartX - this.cartY;\n      },\n      enumerable: true,\n      configurable: true\n    },\n    isoY: {\n      get() {\n        return (this.cartX + this.cartY) / 2;\n      },\n      enumerable: true,\n      configurable: true\n    },\n  });\n};\n\n//A function for converting a Cartsian x and y point\n//to an isometric point\n//(This is unused in this example)\nfunction isoPoint(x, y) {\n  let point = {};\n  point.x = x - y;\n  point.y = (x + y) / 2;\n  return point;\n}"]}