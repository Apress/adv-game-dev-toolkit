{"version":3,"sources":["../src/flappyFairy.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,YAAY,GAAG,CACjB,qCAAqC,CACtC;;;AAAC,AAGF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,gBAAgB,EAAE,YAAY,CAAC;;;AAAC,AAGvD,CAAC,CAAC,KAAK,EAAE;;;;;;;;;;;;;;;;AAAC,AAgBV,CAAC,CAAC,eAAe,GAAG,OAAO,CAAC;AAC5B,CAAC,CAAC,aAAa,EAAE;;;;AAAC,AAIlB,IAAI,OAAO,YAAA;IAAE,MAAM,YAAA;IAAE,KAAK,YAAA;IAAE,GAAG,YAAA;IAAE,MAAM,YAAA;IACrC,KAAK,YAAA;IAAE,QAAQ,YAAA;IAAE,MAAM,YAAA;IAAE,IAAI,YAAA;IAAE,UAAU,YAAA,CAAC;;AAE5C,SAAS,gBAAgB,GAAG;;;AAG1B,KAAG,GAAG,CAAC,CAAC,YAAY,CAClB,SAAS,EACT,CAAC,CAAC,MAAM,CAAC,KAAK,EACd,CAAC,CAAC,MAAM,CAAC,MAAM,CAChB;;;AAAC,AAGF,OAAK,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;;;AAAC,AAG9B,GAAC,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;;;AAAC,AAGjC,UAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,CAClB,QAAQ,EACR,UAAU,EACV,UAAU,CACX,CAAC;;;AAAC,AAGH,GAAC,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC;;;;AAAC,AAIpC,UAAQ,CAAC,OAAO,GAAG,YAAM;AACvB,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;AACnB,KAAC,CAAC,KAAK,GAAG,SAAS,CAAC;GACrB;;;AAAC,AAGF,GAAC,CAAC,KAAK,GAAG,eAAe,CAAC;CAC3B;;AAED,SAAS,eAAe,GAAG;;;;AAIzB,KAAG,CAAC,KAAK,IAAI,CAAC,CAAC;CAEhB;;AAED,SAAS,SAAS,GAAG;;;AAGnB,OAAK,CAAC,OAAO,GAAG,KAAK,CAAC;AACtB,UAAQ,CAAC,OAAO,GAAG,KAAK;;;;AAAC,AAIzB,UAAQ,CAAC,OAAO,GAAG,KAAK;;;;AAAC,AAIzB,QAAM,GAAG,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGnB,MAAI,OAAO,GAAG,CAAC;;;AAAC,AAGhB,MAAI,eAAe,GAAG,EAAE;;;AAAC,AAGzB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;;;AAGxC,QAAI,cAAc,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;;;;AAAC,AAIjD,QAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC;;;;AAAA,AAIvC,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1B,UAAI,CAAC,GAAG,cAAc,IAAI,CAAC,GAAG,cAAc,GAAG,OAAO,GAAG,CAAC,EAAE;AAC1D,YAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACvC,cAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;;;;AAAC,AAIvB,aAAK,CAAC,CAAC,GAAG,AAAC,CAAC,GAAG,GAAG,GAAI,GAAG,CAAC;AAC1B,aAAK,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;OAClB;KACF;;;;AAAA,AAID,QAAI,CAAC,KAAK,eAAe,GAAG,CAAC,EAAE;AAC7B,YAAM,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAChC,YAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACxB,YAAM,CAAC,CAAC,GAAG,AAAC,CAAC,GAAG,GAAG,GAAI,GAAG,CAAC;AAC3B,YAAM,CAAC,CAAC,GAAG,GAAG,CAAC;KAChB;GACF;;;AAAA,AAGD,MAAI,WAAW,GAAG,CAChB,OAAO,EACP,OAAO,EACP,OAAO,CACR,CAAC;AACF,OAAK,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAC9B,OAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AACf,OAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC3B,OAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,OAAK,CAAC,KAAK,GAAG,CAAC;;;;AAAC,AAIhB,YAAU,GAAG,CACX,UAAU,EACV,YAAY,EACZ,WAAW,EACX,YAAY,CACb;;;AAAC,AAGF,MAAI,GAAG,CAAC,CAAC,eAAe,CACtB,GAAG;AACH,cAAM;AACJ,KAAC,CAAC,eAAe;AACf,SAAK,CAAC,CAAC,GAAG,CAAC;AACX,SAAK,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC;AAC9B;aAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;KAAA;AAC1B,KAAC,CAAC,KAAK;AACP,KAAC;AACD,KAAC;AACD,QAAI;AACJ,OAAG,EAAE,GAAG;AACR,MAAE,EAAE,EAAE;AACN,KAAC,EAAE,CAAC;AACJ,SAAK,EAAE,IAAI;AACX,SAAK,EAAE,IAAI;AACX,QAAI,EAAE;AAAG,KACV,CAAC;GACH,CACF;;;AAAC,AAGF,MAAI,CAAC,IAAI,EAAE;;;;AAAC,AAIZ,GAAC,CAAC,OAAO,CAAC,GAAG,GAAG,YAAM;AACpB,SAAK,CAAC,EAAE,IAAI,GAAG,CAAC;GACjB;;;AAAC,AAGF,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;;AAId,KAAG,CAAC,KAAK,IAAI,CAAC;;;;;;AAAC,AAMf,MAAI,MAAM,CAAC,EAAE,GAAG,GAAG,EAAE;AACnB,UAAM,CAAC,CAAC,IAAI,CAAC,CAAC;GACf;;;AAAA,AAGD,OAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC;AAClB,OAAK,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;;;;AAAC,AAIpB,MAAI,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,EAAE;AAC1B,QAAI,CAAC,KAAK,CAAC,OAAO,EAAE;AAClB,WAAK,CAAC,aAAa,EAAE,CAAC;AACtB,UAAI,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;KACjD;GACF;;;;AAAA,AAID,MAAI,KAAK,CAAC,EAAE,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE;AACnC,QAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC;AACzC,SAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd,QAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;GAC/B;;;;;AAAA,AAKD,OAAK,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE;;;;AAAC,AAIvB,MAAI,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AAC7C,MAAI,YAAY,EAAE;AAChB,QAAI,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACzD,WAAK,CAAC,EAAE,GAAG,CAAC,CAAC;KACd;GACF;;;;;;AAAA,AAMD,MAAI,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,KAAK,EAAI;AAC/C,WAAO,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;GAC/C,CAAC;;;;;;AAAC,AAMH,MAAI,YAAY,IAAI,KAAK,CAAC,OAAO,EAAE;;;AAGjC,SAAK,CAAC,OAAO,GAAG,KAAK;;;AAAC,AAGtB,KAAC,CAAC,eAAe,CACf,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO;AAC5B;aAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;KAAA;AAC1B,KAAC,CAAC,KAAK;AACP,MAAE;AACF,KAAC;AACD,SAAK;AACL,KAAC,EAAE,IAAI;AACP,MAAE,EAAE,EAAE;AACN,KAAC,EAAE;AAAC,KACL;;;AAAC,AAGF,QAAI,CAAC,IAAI,EAAE;;;AAAC,AAGZ,KAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CF;AA1CE;AA4CH,SAAS,KAAK,GAAG;;;AAGf,OAAK,CAAC,OAAO,GAAG,IAAI,CAAC;AACrB,OAAK,CAAC,CAAC,GAAG,EAAE,CAAC;AACb,OAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACb,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAM,CAAC,CAAC,GAAG,CAAC,CAAC;CACd","file":"flappyFairy.js","sourcesContent":["/*\nLearn how to use Hexi to build a simple game prototype\n*/\n\n//An array that contains all the files you want to load\nlet thingsToLoad = [\n  \"images/flappyFairy/flappyFairy.json\"\n];\n\n//Create a new Hexi instance, and start it\nlet g = hexi(910, 512, setupTitleScreen, thingsToLoad);\n\n//Start Hexi\ng.start();\n\n//Warning: The experimental fullscreen feature below has been removed for now\n//until a more reliable system can be built. There were too many\n//cross-platform bugs to implement this reliably inside Hexi.\n//Enable fullscreen mode using `enableFullscreen`.\n//Fullscreen mode will be activated as soon as the \n//user clicks or touches the canvas.\n//You can supply an optional list of ascii keycodes for keys that\n//will exit fullscreen mode. In this example you can exit fullscreen\n//mode by pressing lowercase `x` (88) or uppercase `X` (120) on \n//the keyboard. If you leave these arguments out, the default `esc`\n//key will do the trick.\n//g.enableFullScreen(88, 120);\n\n//Set the background color and scale the canvas\ng.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare your global variables (global to this game, which means you\n//want to use them in more than one function)\nlet pointer, canvas, fairy, sky, blocks,\n  title, goButton, finish, dust, dustFrames;\n\nfunction setupTitleScreen() {\n\n  //Make the sky background\n  sky = g.tilingSprite(\n    \"sky.png\",\n    g.canvas.width,\n    g.canvas.height\n  );\n\n  //Create the title sprite\n  title = g.sprite(\"title.png\");\n\n  //Center the title\n  g.stage.putCenter(title, 0, -70);\n\n  //Create the play button\n  goButton = g.button([\n    \"up.png\",\n    \"over.png\",\n    \"down.png\"\n  ]);\n\n  //Center the play button\n  g.stage.putCenter(goButton, 0, 150);\n\n  //Make the play button's `press` action\n  //start the game when the button is pressed.\n  goButton.release = () => {\n    console.log(\"test\")\n    g.state = setupGame;\n  };\n\n  //Start the `playTitleScreen` state.\n  g.state = playTitleScreen;\n}\n\nfunction playTitleScreen() {\n\n  //Make the sky background scroll by shifting the `tileX`\n  //of the `sky` tiling sprite.\n  sky.tileX -= 1;\n\n}\n\nfunction setupGame() {\n\n  //Make the title and play button invisible.\n  title.visible = false;\n  goButton.visible = false;\n\n  //Disable the play button so that it can't be pressed\n  //by setting its `enabled` property to `false`.\n  goButton.enabled = false;\n\n  //Make the world\n  //Create a `group` for all the blocks\n  blocks = g.group();\n\n  //What should the initial size of the gap be between the pillars?\n  let gapSize = 4;\n\n  //How many pillars?\n  let numberOfPillars = 15;\n\n  //Loop 15 times to make 15 pillars\n  for (let i = 0; i < numberOfPillars; i++) {\n\n    //Randomly place the gap somewhere inside the pillar\n    let startGapNumber = g.randomInt(0, 8 - gapSize);\n\n    //Reduce the `gapSize` by one after every fifth pillar. This is\n    //what makes gaps gradually become narrower\n    if (i > 0 && i % 5 === 0) gapSize -= 1;\n\n    //Create a block if it's not within the range of numbers\n    //occupied by the gap\n    for (let j = 0; j < 8; j++) {\n      if (j < startGapNumber || j > startGapNumber + gapSize - 1) {\n        let block = g.sprite(\"greenBlock.png\");\n        blocks.addChild(block);\n\n        //Space each pillar 384 pixels apart. The first pillar will be\n        //placed at an x position of 512\n        block.x = (i * 384) + 512;\n        block.y = j * 64;\n      }\n    }\n\n    //After the pillars have been created, add the finish image\n    //right at the end\n    if (i === numberOfPillars - 1) {\n      finish = g.sprite(\"finish.png\");\n      blocks.addChild(finish);\n      finish.x = (i * 384) + 896;\n      finish.y = 192;\n    }\n  }\n\n  //Make the fairy \n  let fairyFrames = [\n    \"0.png\",\n    \"1.png\",\n    \"2.png\"\n  ];\n  fairy = g.sprite(fairyFrames);\n  fairy.fps = 12;\n  fairy.setPosition(232, 32);\n  fairy.vy = 0;\n  fairy.oldVy = 0;\n\n  //Create the frames array for the fairy dust images\n  //that trail the fairy \n  dustFrames = [\n    \"pink.png\",\n    \"yellow.png\",\n    \"green.png\",\n    \"violet.png\"\n  ];\n\n  //Create the emitter\n  dust = g.particleEmitter(\n    300, //The interval\n    () => {\n      g.createParticles( //The function\n        fairy.x + 8, //x position\n        fairy.y + fairy.halfHeight + 8, //y position\n        () => g.sprite(dustFrames), //Particle sprite\n        g.stage, //The container to add the particles to               \n        3, //Number of particles\n        0, //Gravity\n        true, //Random spacing\n        2.4, 3.6, //Min/max angle\n        12, 18, //Min/max size\n        1, 2, //Min/max speed\n        0.005, 0.01, //Min/max scale speed\n        0.005, 0.01, //Min/max alpha speed\n        0.05, 0.1 //Min/max rotation speed\n      );\n    }\n  );\n\n  //Make the particle stream start playing when the game starts\n  dust.play();\n\n  //Make the pointer and increase the fairy's \n  //vertical velocity when it's tapped\n  g.pointer.tap = () => {\n    fairy.vy += 1.5;\n  };\n\n  //set the game state to `play`\n  g.state = play;\n}\n\n//The `play` state\nfunction play() {\n\n  //Make the sky background scroll by shifting the `tileX`\n  //of the `sky` tiling sprite\n  sky.tileX -= 1;\n\n  //Move the blocks 2 pixels to the left each frame.\n  //This will just happen while the finish image is off-screen.\n  //As soon as the finish image scrolls into view, the blocks\n  //container will stop moving\n  if (finish.gx > 256) {\n    blocks.x -= 2;\n  }\n\n  //Add gravity to the fairy\n  fairy.vy += -0.05;\n  fairy.y -= fairy.vy;\n\n  //Decide whether or not the fairy should flap her wings \n  //If she's starting to go up, make her flap her wings and emit fairy dust\n  if (fairy.vy > fairy.oldVy) {\n    if (!fairy.playing) {\n      fairy.playAnimation();\n      if (fairy.visible && !dust.playing) dust.play();\n    }\n  }\n\n  //If she's staring to go down, stop flapping her wings, show the first frame \n  //and stop the fairy dust\n  if (fairy.vy < 0 && fairy.oldVy > 0) {\n    if (fairy.playing) fairy.stopAnimation();\n    fairy.show(0);\n    if (dust.playing) dust.stop();\n  }\n\n  //Store the fairy's current vy so we can use it\n  //to find out if the fairy has changed direction\n  //in the next frame. (You have to do this as the last step)\n  fairy.oldVy = fairy.vy;\n\n  //Keep the fairy contained inside the stage and \n  //neutralize her velocity if she hits the top or bottom boundary\n  let fairyVsStage = g.contain(fairy, g.stage);\n  if (fairyVsStage) {\n    if (fairyVsStage.has(\"bottom\") || fairyVsStage.has(\"top\")) {\n      fairy.vy = 0;\n    }\n  }\n\n  //Loop through all the blocks and check for a collision between\n  //each block and the fairy. (`some` will quit the loop as soon as\n  //`hitTestRectangle` returns `true`). Set `hitTestRectangle`s third argument\n  //to `true` to use the sprites' global coordinates\n  let fairyVsBlock = blocks.children.some(block => {\n    return g.hitTestRectangle(fairy, block, true);\n  });\n\n  //If there's a collision and the fairy is currently visible,\n  //create the explosion effect and reset the game after\n  //a three second delay\n\n  if (fairyVsBlock && fairy.visible) {\n\n    //Make the fairy invisible\n    fairy.visible = false;\n\n    //Create a fairy dust explosion\n    g.createParticles(\n      fairy.centerX, fairy.centerY, //x and y position\n      () => g.sprite(dustFrames), //Particle sprite\n      g.stage, //The container to add the particles to  \n      20, //Number of particles\n      0, //Gravity\n      false, //Random spacing\n      0, 6.28, //Min/max angle\n      16, 32, //Min/max size\n      1, 3 //Min/max speed\n    );\n\n    //Stop the dust emitter that's trailing the fairy\n    dust.stop();\n\n    //Wait 3 seconds and then reset the game\n    g.wait(3000, reset);\n  }\n\n  //Alternatively, you can achieve the same collision effect\n  //using the higher level universal `hit` function\n  /*\n  //Check for a collision between the fairy and the blocks\n  let fairyVsBlock = g.hit(\n\n    //arguments: sprite, array, react, bounce, global \n    fairy, blocks.children, false, false, true,\n\n    //collision function\n    () => {\n      if (fairy.visible) {\n\n        //Make the fairy invisible\n        fairy.visible = false;\n\n        //Create a fairy dust explosion\n        g.particleEffect(\n          fairy.centerX, fairy.centerY, //x and y position\n          function() {                  //Particle sprite\n            return g.sprite(dustFrames)\n          },     \n          20,                           //Number of particles\n          0,                            //Gravity\n          false,                        //Random spacing\n          0, 6.28,                      //Min/max angle\n          16, 32,                       //Min/max size\n          1, 3                          //Min/max speed\n        );\n        \n        //Stop the dust emitter\n        dust.stop();\n\n        //Wait 3 seconds and then reset the game\n        g.wait(3000, reset);\n      }\n    }\n  );\n  */\n\n}\n\nfunction reset() {\n\n  //Reset the game if the fairy hits a block\n  fairy.visible = true;\n  fairy.y = 32;\n  fairy.vy = 0;\n  dust.play();\n  blocks.x = 0;\n}"]}