{"version":3,"sources":["../src/alienArmada.js"],"names":[],"mappings":"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","file":"alienArmada.js","sourcesContent":["/*\nLearn how to use Hexi to build a simple game prototype\n*/\n\n//An array that contains all the files you want to load\nlet thingsToLoad = [\n  \"images/alienArmada.json\",\n  \"sounds/explosion.mp3\",\n  \"sounds/music.mp3\",\n  \"sounds/shoot.mp3\",\n  \"fonts/emulogic.ttf\" //<- The custom font\n];\n\n//Create a new Hexi instance, and start it\nlet g = hexi(480, 320, setup, thingsToLoad, load);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Start Hexi\ng.start();\n\n//Declare your global variables (global to this game, which means you\n//want to use them in more than one function)\nlet cannon,\n  scoreDisplay,\n  music,\n  bullets,\n  winner,\n  shootSound,\n  explosionSound,\n  aliens,\n  score,\n  scoreNeededToWin,\n  alienFrequency,\n  alienTimer,\n  gameOverMessage;\n\n//Use the `load` function to run any code while the assets are\n//loading. The `load` function runs in the game loop.\nfunction load() {\n\n  //Use Hexi's built in `loadingBar` to display a loading progress\n  //percentage bar while the assets are loading.\n  g.loadingBar();\n}\n\n//The `setup` function runs once and is used to initializes your game \nfunction setup() {\n\n  //Make the background.\n  let background = g.sprite(\"background.png\");\n\n  //Create the cannon.\n  cannon = g.sprite(\"cannon.png\");\n\n  //Center the canon 40 pixels above the bottom of the stage.\n  //`putBottom` arguments: spriteToPosition, xOffset, yOffset.\n  g.stage.putBottom(cannon, 0, -40);\n\n  //An array to store the bullets.\n  bullets = [];\n\n  //An array to store the aliens\n  aliens = [];\n\n  //Create the score message\n  //`text` arguments: stringContent, font, color, x, y.\n  scoreDisplay = g.text(\"0\", \"20px emulogic\", \"#00FF00\", 400, 10);\n\n  //Create the sounds.\n  //Music.\n  music = g.sound(\"sounds/music.mp3\");\n  music.play();\n\n  //Shoot sound.\n  //Create the sound.\n  shootSound = g.sound(\"sounds/shoot.mp3\");\n\n  //Pan the `shootSound` so that it's 75% in the left speaker.\n  //Panning values range between -1 (left speaker) and 1 (right\n  //speaker.) A pan value of 0 means that the sound is equal\n  //in both speakers.\n  shootSound.pan = -0.5;\n\n  //Explosion sound.\n  //Create the sound.\n  explosionSound = g.sound(\"sounds/explosion.mp3\");\n\n  //Pan the `explosionSound` so that it's 75% in the right speaker.\n  explosionSound.pan = 0.5;\n\n  //Set up the keyboard arrow keys to move the cannon.\n  let leftArrow = g.keyboard(37),\n    rightArrow = g.keyboard(39),\n    spaceBar = g.keyboard(32);\n\n  //Left arrow key.\n  //Assign key `press` method.\n  leftArrow.press = () => {\n\n    //Change the player's velocity when the key is pressed.\n    cannon.vx = -5;\n    cannon.vy = 0;\n  };\n\n  //Assign key `release` method.\n  leftArrow.release = () => {\n\n    //If the left arrow has been released, and the right arrow isn't down,\n    //and the player isn't moving vertically:\n    //Stop the player.\n    if (!rightArrow.isDown && cannon.vy === 0) {\n      cannon.vx = 0;\n    }\n  };\n\n  //Right arrow key.\n  //Assign key `press` method.\n  rightArrow.press = () => {\n    cannon.vx = 5;\n    cannon.vy = 0;\n  };\n\n  //Assign key `release` method.\n  rightArrow.release = () => {\n    if (!leftArrow.isDown && cannon.vy === 0) {\n      cannon.vx = 0;\n    }\n  };\n\n  //Space key.\n  spaceBar.press = () => {\n\n    //Shoot the bullet.\n    g.shoot(\n      cannon, //The shooter\n      4.71, //The angle at which to shoot (4.71 is up)\n      cannon.halfWidth, //Bullet's x position on the cannon\n      0, //Bullet's y position on the canon\n      g.stage, //The container to which the bullet should be added\n      7, //The bullet's speed (pixels per frame)\n      bullets, //The array used to store the bullets\n\n      //A function that returns the sprite that should\n      //be used to make each bullet\n      () => g.sprite(\"bullet.png\")\n    );\n\n    //Play the shoot sound.\n    shootSound.play();\n  };\n\n  //Game variables\n  score = 0;\n  scoreNeededToWin = 60;\n  alienTimer = 0;\n  alienFrequency = 100;\n  winner = \"\";\n\n  //Set the game state to `play`\n  g.state = play;\n}\n\n//The `play` function contains all the game logic and runs in a loop\nfunction play() {\n\n  /* The Cannon */\n\n  //Move the cannon.\n  g.move(cannon);\n\n  //Keep the cannon contained to the stage boundary.\n  g.contain(cannon, g.stage);\n\n  /* The Bullets */\n\n  //Use the `move` method to move all the bullet sprites in the\n  //`bullets` array. The `move` method automatically loops through\n  //all the sprites in the array and updates their x and y positions\n  //with the value of their `vx` and `vy` velocity values.\n  g.move(bullets);\n\n  /* Make the Aliens */\n\n  //Make the aliens with the help of an `alienTimer` that\n  //creates aliens with ever-increasing frequency. The \n  //`alienTimer` starts at 0, and is updated by 1 each frame.\n  //When it reaches the value of `alienFrequency` (100), \n  //a new alien is created, and the value\n  //of `alienFrequency` is reduced by one. That means the next\n  //Alien will be created when the timer reacher 99, and the\n  //one after that when the timer reaches 98. This creates a\n  //slowly increasing number of aliens which gradually becomes\n  //a deluge.\n\n  //Add one to the alienTimer.\n  alienTimer++;\n\n  //Make a new alien if `alienTimer` equals the `alienFrequency`.\n  if (alienTimer === alienFrequency) {\n\n    //Create the alien.\n    //Assign two frames from the texture atlas as the \n    //alien's two states.\n    let alienFrames = [\n      \"alien.png\",\n      \"explosion.png\"\n    ];\n\n    //Initialize the alien sprite with the frames\n    let alien = g.sprite(alienFrames);\n\n    //Define some states on the alien that correspond\n    //to the its two frames.\n    alien.states = {\n      normal: 0,\n      destroyed: 1\n    };\n\n    //Set its y position above the screen boundary.\n    alien.y = 0 - alien.height;\n\n    //Assign the alien a random x position.\n    alien.x = g.randomInt(0, 14) * alien.width;\n\n    //Set its speed.\n    alien.vy = 1;\n\n    //Push the alien into the `aliens` array.\n    aliens.push(alien);\n\n    //Set the `alienTimer` back to zero.\n    alienTimer = 0;\n\n    //Reduce `alienFrequency` by one to gradually increase\n    //the frequency that aliens are created\n    if (alienFrequency > 2) {\n      alienFrequency--;\n    }\n  }\n\n  /* Move the aliens */\n\n  //Use the `move` method to move all the alien sprites in the\n  //`aliens` array.\n  g.move(aliens);\n\n  //Check for a collision between the aliens and the bullets.\n  //Filter through each alien in the `aliens` array.\n  aliens = aliens.filter(alien => {\n\n    //A variable to help check if the alien is\n    //alive or dead.\n    let alienIsAlive = true;\n\n    //Filter though all the bullets.\n    bullets = bullets.filter(bullet => {\n\n      //Check for a collision between an alien and bullet.\n      if (g.hitTestRectangle(alien, bullet)) {\n\n        //Remove the bullet sprite.\n        g.remove(bullet);\n\n        //Show the alien's `destroyed` state.\n        alien.show(alien.states.destroyed);\n\n        //You could alternatively use the frame number,\n        //like this:\n        //alien.show(1);\n\n        //Play the explosion sound.\n        explosionSound.play();\n\n        //Stop the alien from moving.\n        alien.vy = 0;\n\n        //Set `alienAlive` to false so that it can be\n        //removed from the array.\n        alienIsAlive = false;\n\n        //Wait for 1 second (1000 milliseconds) then \n        //remove the alien sprite.\n        g.wait(1000, () => g.remove(alien));\n\n        //Update the score.\n        score += 1;\n\n        //Remove the bullet from the `bullets array.\n        return false;\n\n      } else {\n\n        //If there's no collision, keep the bullet in the\n        //bullets array.\n        return true;\n      }\n    });\n\n    //Return the value of `alienIsAlive` back to the \n    //filter loop. If it's `true`, the alien will be\n    //kept in the `aliens` array. \n    //If it's `false` it will be removed from the `aliens` array.\n    return alienIsAlive;\n  });\n\n  /* Display the score */\n\n  scoreDisplay.content = score;\n\n  /* Check for the end of the game */\n\n  //The player wins if the score matches the value\n  //of `scoreNeededToWin`, which is 60\n  if (score === scoreNeededToWin) {\n\n    //Set the player as the winner.\n    winner = \"player\";\n\n    //Change the game's state to `end`.\n    g.state = end;\n  }\n\n  //The aliens win if one of them reaches the bottom of\n  //the stage.\n  aliens.forEach(alien => {\n\n    //Check to see if the `alien`'s `y` position is greater\n    //than the `stage`'s `height`\n    if (alien.y > g.canvas.height) {\n\n      //Set the aliens as the winner.\n      winner = \"aliens\";\n\n      //Change the game's state to `end`.\n      g.state = end;\n    }\n  });\n}\n\nfunction end() {\n\n  //Pause the game loop.\n  g.pause();\n\n  //Create the game over message text.\n  gameOverMessage = g.text(\"\", \"20px emulogic\", \"#00FF00\", 90, 120);\n\n  //Reduce the music volume by half.\n  //1 is full volume, 0 is no volume, and 0.5 is half volume.\n  music.volume = 0.5;\n\n  //Display \"Earth Saved!\" if the player wins.\n  if (winner === \"player\") {\n    gameOverMessage.content = \"Earth Saved!\";\n    gameOverMessage.x = 120;\n  }\n\n  //Display \"Earth Destroyed!\" if the aliens win.\n  if (winner === \"aliens\") {\n    gameOverMessage.content = \"Earth Destroyed!\";\n  }\n\n  //Wait for 3 seconds then run the `reset` function.\n  g.wait(3000, () => reset());\n}\n\n//The `reset` function resets all the game variables.\nfunction reset() {\n\n  //Reset the game variables.\n  score = 0;\n  alienFrequency = 100;\n  alienTimer = 0;\n  winner = \"\";\n\n  //Set the music back to full volume.\n  music.volume = 1;\n\n  //Remove any remaining alien and bullet sprites.\n  //The universal `remove` method will loop through\n  //all the sprites in an array of sprites, removed them\n  //from their parent container, and splice them out of the array.\n  g.remove(aliens);\n  g.remove(bullets);\n\n  //You can also use the universal `remove` function to remove.\n  //a single sprite.\n  g.remove(gameOverMessage);\n\n  //Re-center the cannon.\n  g.stage.putBottom(cannon, 0, -40);\n\n  //Change the game state back to `play`.\n  g.state = play;\n  g.resume();\n}"]}