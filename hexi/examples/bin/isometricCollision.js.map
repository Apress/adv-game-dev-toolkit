{"version":3,"sources":["../src/isometricCollision.js"],"names":[],"mappings":"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","file":"isometricCollision.js","sourcesContent":["/*\nIsometric tile collision detection using `hitTestIsoTile`\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup);\n\n//Scale the canvas to the maximum browser dimensions\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet world, leftArrow, upArrow,\n  rightArrow, downArrow, message,\n  player, groundLayer, wallMapArray;\n\n//Start Hexi\ng.start();\n\nfunction setup() {\n\n  //Create the `world` container that defines our isometric \n  //tile-based world\n  world = g.group();\n\n  //Set the `tileWidth` and `tileHeight` of each tile, in pixels\n  world.cartTilewidth = 32;\n  world.cartTileheight = 32;\n\n  //Define the width and height of the world, in tiles\n  world.widthInTiles = 8;\n  world.heightInTiles = 8;\n\n  //Create the world layers\n  world.layers = [\n\n    //The environment layer. `2` represents the walls,\n    //`1` represents the floors\n    [\n      2, 2, 2, 2, 2, 2, 2, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 1, 2, 1, 1, 2, 1, 2,\n      2, 1, 1, 1, 1, 2, 2, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 2, 2, 1, 2, 1, 1, 2,\n      2, 1, 1, 1, 1, 1, 1, 2,\n      2, 2, 2, 2, 2, 2, 2, 2\n    ],\n\n    //The character layer. `3` represents the game character\n    //`0` represents an empty cell which won't contain any\n    //sprites\n    [\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 3, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 0, 0, 0, 0, 0\n    ]\n  ];\n\n  //Build the game world by looping through each of the arrays\n  world.layers.forEach(layer => {\n\n    //Loop through each array element\n    layer.forEach((gid, index) => {\n\n      //If the cell isn't empty (0) then create a sprite\n      if (gid !== 0) {\n\n        //Find the column and row that the sprite is on and also\n        //its x and y pixel values.\n        let column, row, x, y;\n        column = index % world.widthInTiles;\n        row = Math.floor(index / world.widthInTiles);\n        x = column * world.cartTilewidth;\n        y = row * world.cartTileheight;\n\n        //Next, create a different sprite based on what its \n        //`gid` number is\n        let sprite;\n        switch (gid) {\n\n          //The floor\n          case 1:\n\n            //Create a sprite using an isometric rectangle\n            sprite = g.isoRectangle(world.cartTilewidth, world.cartTileheight, 0xCCCCFF);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0xCCCCFF);\n            break;\n\n            //The walls\n          case 2:\n            sprite = g.isoRectangle(world.cartTilewidth, world.cartTileheight, 0x99CC00);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0x99CC00);\n            break;\n\n            //The character  \n          case 3:\n            sprite = g.isoRectangle(world.cartTilewidth, world.cartTileheight, 0xFF0000);\n            //Cartesian rectangle:\n            //sprite = g.rectangle(world.cartTilewidth, world.cartTileheight, 0xFF0000);\n\n            //Define this sprite as the `player`\n            player = sprite;\n        }\n\n        //Add these properties to the sprite\n        g.addIsoProperties(sprite, x, y, world.cartTilewidth, world.cartTileheight);\n\n        //Set the sprite's `x` and `y` pixel position based on its\n        //isometric coordinates\n        sprite.x = sprite.isoX;\n        sprite.y = sprite.isoY;\n\n        //Cartesian positioning\n        //sprite.x = sprite.cartX;\n        //sprite.y = sprite.cartY;\n\n        //Add the sprite to the `world` container\n        world.addChild(sprite);\n      }\n    });\n  });\n\n  //Position the world inside the canvas\n  let canvasOffset = (g.canvas.width / 2) - world.cartTilewidth;\n  world.x += canvasOffset;\n  world.y = 0;\n\n  //Make a text object\n  message = g.text(\"\", \"16px Futura\", \"black\");\n  message.setPosition(5, 0);\n\n  //Create the keyboard objects\n  leftArrow = g.keyboard(37);\n  upArrow = g.keyboard(38);\n  rightArrow = g.keyboard(39);\n  downArrow = g.keyboard(40);\n\n  //Assign the key `press` actions\n  player.direction = \"none\";\n  leftArrow.press = () => player.direction = \"left\";\n  upArrow.press = () => player.direction = \"up\";\n  rightArrow.press = () => player.direction = \"right\";\n  downArrow.press = () => player.direction = \"down\";\n  leftArrow.release = () => player.direction = \"none\";\n  upArrow.release = () => player.direction = \"none\";\n  rightArrow.release = () => player.direction = \"none\";\n  downArrow.release = () => player.direction = \"none\";\n\n  //Set the game state to `play`\n  g.state = play;\n}\n\nfunction play() {\n\n  //Change the player character's velocity if it's centered over a grid cell\n  if (Math.floor(player.cartX) % world.cartTilewidth === 0 && Math.floor(player.cartY) % world.cartTileheight === 0) {\n    switch (player.direction) {\n      case \"up\":\n        player.vy = -2;\n        player.vx = 0;\n        break;\n      case \"down\":\n        player.vy = 2;\n        player.vx = 0;\n        break;\n      case \"left\":\n        player.vx = -2;\n        player.vy = 0;\n        break;\n      case \"right\":\n        player.vx = 2;\n        player.vy = 0;\n        break;\n      case \"none\":\n        player.vx = 0;\n        player.vy = 0;\n        break;\n    }\n  }\n\n  //Update the player's Cartesian position \n  //based on its velocity\n  player.cartY += player.vy;\n  player.cartX += player.vx;\n\n  //Wall collision\n  //Get a reference to the wall map array\n  wallMapArray = world.layers[0];\n\n  //Use `hiteTestIsoTile` to check for a collision\n  let playerVsGround = g.hitTestIsoTile(player, wallMapArray, 1, world, \"every\");\n\n  //If there's a collision, prevent the player from moving.\n  //Subtract its velocity from its position and then set its velocity to zero\n  if (!playerVsGround.hit) {\n    player.cartX -= player.vx;\n    player.cartY -= player.vy;\n    player.vx = 0;\n    player.vy = 0;\n  }\n\n  //Add world boundaries\n  let top = 0,\n    bottom = (world.heightInTiles * world.cartTileheight),\n    left = 0,\n    right = (world.widthInTiles * world.cartTilewidth);\n\n  //Prevent the player from crossing any of the world boundaries\n  //Top\n  if (player.cartY < 0) {\n    player.cartY = top;\n  }\n\n  //Bottom\n  if (player.cartY + player.cartHeight > bottom) {\n    player.cartY = bottom - player.cartHeight;\n  }\n\n  //Left\n  if (player.cartX < left) {\n    player.cartX = left;\n  }\n\n  //Right\n  if (player.cartX + player.cartWidth > right) {\n    player.cartX = right - player.cartWidth;\n  }\n\n  //Position the sprite's screen `x` and `y` position\n  //using its isometric coordinates\n  player.x = player.isoX;\n  player.y = player.isoY;\n\n  //Get the player's index position in the map array\n  player.index = g.getIndex(\n    player.cartX, player.cartY,\n    world.cartTilewidth, world.cartTileheight, world.widthInTiles\n  );\n\n  //Display the player's x, y and index values\n  message.content = `index: ${player.index}`;\n}"]}