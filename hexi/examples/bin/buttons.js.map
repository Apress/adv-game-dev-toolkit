{"version":3,"sources":["../src/buttons.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,YAAY,GAAG,CACjB,yBAAyB,EACzB,mBAAmB,EACnB,oBAAoB,CACrB;;;AAAC,AAGF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;AAC5C,CAAC,CAAC,KAAK,EAAE;;;;AAAC,AAIV,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,MAAM,YAAA;IAAE,YAAY,YAAA;IAAE,aAAa,YAAA;;;AAAC,AAGxC,SAAS,KAAK,GAAG;;;;;AAKf,MAAI,YAAY,GAAG,CACjB,QAAQ,EACR,UAAU,EACV,UAAU,CACX;;;;;;;;;;;;;;AAAC,AAcF,QAAM,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;;;;AAAC,AAIhC,QAAM,CAAC,KAAK,GAAG;WAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;GAAA,CAAC;AAC5C,QAAM,CAAC,OAAO,GAAG;WAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;GAAA,CAAC;AAC/C,QAAM,CAAC,IAAI,GAAG;WAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;GAAA,CAAC;AACxC,QAAM,CAAC,GAAG,GAAG;WAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;GAAA,CAAC;AACtC,QAAM,CAAC,GAAG,GAAG;WAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;GAAA;;;AAAC,AAGzC,QAAM,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC;AACnC,QAAM,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE;;;AAAC,AAGpC,cAAY,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AAChE,cAAY,CAAC,CAAC,GAAG,EAAE,CAAC;AACpB,cAAY,CAAC,CAAC,GAAG,EAAE,CAAC;;AAEpB,eAAa,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;AAClE,eAAa,CAAC,CAAC,GAAG,EAAE,CAAC;AACrB,eAAa,CAAC,CAAC,GAAG,EAAE;;;AAAC,AAGrB,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;AAGd,cAAY,CAAC,OAAO,GAAG,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;AAChD,eAAa,CAAC,OAAO,GAAG,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;CACpD","file":"buttons.js","sourcesContent":["/*\nLearn how to make an interactive button with three\nstates: up, over and down.\n*/\n\nlet thingsToLoad = [\n  \"images/buttonFrames.png\",\n  \"fonts/puzzler.otf\",\n  \"images/button.json\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(256, 256, setup, thingsToLoad);\ng.start();\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet button, stateMessage, actionMessage;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Create and array with texture atlas frame id names of each\n  //button state, in this order: up, over and down. If only two frames\n  //are supplied, they'll be used for the up and down states\n  let buttonFrames = [\n    \"up.png\",\n    \"over.png\",\n    \"down.png\"\n  ];\n\n  //Alternatively, you can use the `frames` method to make a button\n  //from a single tileset image that contains sub-images which \n  //represent each button state\n  /*\n  let buttonFrames = g.frames(\n    \"images/buttonFrames.png\",   //The tileset image\n    [[0,0],[0,96],[0,192]],      //The `x` and `y` positions of the frames\n    192, 96                      //The `width` and `height` of each frame\n  );\n  */\n\n  //Make a `button` using the frames\n  button = g.button(buttonFrames);\n\n  //Assign the button's optional and customizable `press`, `release`, \n  //`over`, `out` and `tap` actions\n  button.press = () => console.log(\"pressed\");\n  button.release = () => console.log(\"released\");\n  button.over = () => console.log(\"over\");\n  button.out = () => console.log(\"out\");\n  button.tap = () => console.log(\"tapped\");\n\n  //Position the button\n  button.x = g.canvas.width / 2 - 96;\n  button.y = g.canvas.height / 2 - 48;\n\n  //Some text to display the button's state and action\n  stateMessage = g.text(\"State not set\", \"14px puzzler\", \"black\");\n  stateMessage.x = 12;\n  stateMessage.y = 12;\n\n  actionMessage = g.text(\"Action not set\", \"14px puzzler\", \"black\");\n  actionMessage.x = 12;\n  actionMessage.y = 32;\n\n  //Buttons remain interactive even if there's no game loop running.\n  g.state = play;\n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n  //Display the button's current state and action\n  stateMessage.content = \"State: \" + button.state;\n  actionMessage.content = \"Action: \" + button.action;\n}"]}