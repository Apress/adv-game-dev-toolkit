{"version":3,"sources":["../src/keyframeAnimation.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,KAAK,EAAE;;;;AAAC,AAIV,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,KAAK,YAAA;;;AAAC,AAGV,SAAS,KAAK,GAAG;;;;;;;;;;AAUf,MAAI,WAAW,GAAG,CAAC,CAAC,MAAM,CACxB,wBAAwB;AACxB,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;AACrB,IAAE,EAAE;AAAE,GACP;;;AAAC,AAGF,OAAK,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;;;;;;;;;;;;;;AAAC,AAc9B,OAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AACf,OAAK,CAAC,aAAa,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA0BtB,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;AAED,SAAS,IAAI,GAAG;;;;AAId,GAAC,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;CACrC","file":"keyframeAnimation.js","sourcesContent":["/*\nLearn how to make an animated sprite\n*/\n\n//Create a new Hexi instance, and start it.\n//Load an image file with more than one animation frame\nlet g = hexi(256, 256, setup, [\"images/pixieFrames.png\"]);\ng.start();\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet pixie;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n/*\n  Hexi has three way that you can make sprites with animation frames.\n  The first, lower level way, is to use the `frames` method. `frames`\n  lets you list an array of x/y positions on an image that refer to\n  each sub-image that you wan to use. Here's how to use it:\n  */   \n\n  //Create the pixie's animation frames using the `frames` method\n  let pixieFrames = g.frames(\n    \"images/pixieFrames.png\", //The tileset image\n    [[0,0],[48,0],[96,0]],    //The `x` and `y` positions of frames\n    48, 32                    //The `width` and `height` of each frame\n  );\n\n  //Make a sprite using the frames\n  pixie = g.sprite(pixieFrames);\n\n  //You can also make a sprite with multiple frames by supplying the\n  //sprite with an array of image file names. See the next example file\n  //if you want to find out how to do that.\n  //But the best way to make a sprite with multiple frames is to use\n  //a texture atlas. Another example file ahead will show you how. But \n  //no matter how you add frames to a sprite, you control those frames\n  //same way, which you'll learn next.\n\n  //Use the `playAnimation` method to play the pixie's frames.\n  //The animation will loop unless you set the sprite's `loop`\n  //property to `false`. Change the frame-rate with the\n  //`fps` property (it's default value is `12`)\n  pixie.fps = 24;\n  pixie.playAnimation();\n\n  //Use the `stopAnimation` method to stop an animation.\n  //Here's an example of how you could stop the\n  //pixie from flapping her wings after 3 seconds\n  /*\n  g.wait(3000, function(){\n     pixie.stopAnimation(); \n  });\n  */\n\n  //You can use `gotoAndStop` to go to a specific frame number\n  //pixie.gotoAndStop(2);\n\n  //You can also use the `show` method to display\n  //a specific frame. This is usually better to use than `gotoAndStop`\n  //because its more tightly integrated into the sprite's \n  //state and animation manager.\n  //pixie.show(1);\n\n  //You can also use `playAnimation` to play a range of frames by\n  //supplying it with an array of the numbers that you want to play \n  //pixie.fps = 1;\n  //pixie.playAnimation([0, 1]);\n\n\n  g.state = play;    \n}\n\nfunction play() {\n\n  //Make the pixie ease towards the pointer.\n  //`followEase` arguments: follower, leader, speed\n  g.followEase(pixie, g.pointer, 0.1);\n}\n\n\n"]}