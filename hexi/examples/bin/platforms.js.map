{"version":3,"sources":["../src/platforms.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,YAAY,GAAG,CACf,sBAAsB,EACtB,mBAAmB,CACtB;;;AAAC,AAGF,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC;;;;AAAC,AAI5C,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,KAAK,YAAA;IAAE,KAAK,YAAA;IAAE,MAAM,YAAA;IAAE,MAAM,YAAA;IAAE,KAAK,YAAA;;;;AAAC,AAIxC,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,SAAS,KAAK,GAAG;;;AAGf,MAAI,KAAK,GAAG;;;AAGV,gBAAY,EAAE,EAAE;AAChB,iBAAa,EAAE,EAAE;;;AAGjB,aAAS,EAAE,EAAE;AACb,cAAU,EAAE,EAAE;;;;;AAKd,WAAO,EAAE;;;AAGP,YAAM,EAAE,sBAAsB;;;AAG9B,YAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AAChB,cAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AACjB,WAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AACd,SAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AACb,UAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;AACb,WAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;KACd;GACF;;;;;;AAAC,AAMF,OAAK,GAAG,SAAS,CAAC,KAAK,CAAC;;;AAAC,AAGzB,QAAM,GAAG,KAAK,CAAC,MAAM;;;AAAC,AAGtB,QAAM,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;;;AAAC,AAG3D,OAAK,GAAG,CAAC;;;AAAC,AAGV,MAAI,SAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;MAC1B,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;MAC3B,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;;;AAAC,AAG9B,WAAS,CAAC,KAAK,GAAG,YAAM;AACtB,QAAI,UAAU,CAAC,IAAI,EAAE;AACnB,YAAM,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC;KAC7B;GACF,CAAC;AACF,WAAS,CAAC,OAAO,GAAG,YAAM;AACxB,QAAI,UAAU,CAAC,IAAI,EAAE;AACnB,YAAM,CAAC,aAAa,GAAG,CAAC,CAAC;KAC1B;GACF;;AAAC,AAEF,YAAU,CAAC,KAAK,GAAG,YAAM;AACvB,QAAI,SAAS,CAAC,IAAI,EAAE;AAClB,YAAM,CAAC,aAAa,GAAG,GAAG,CAAC;KAC5B;GACF,CAAC;AACF,YAAU,CAAC,OAAO,GAAG,YAAM;AACzB,QAAI,SAAS,CAAC,IAAI,EAAE;AAClB,YAAM,CAAC,aAAa,GAAG,CAAC,CAAC;KAC1B;GACF;;AAAC,AAEF,UAAQ,CAAC,KAAK,GAAG,YAAM;AACrB,QAAI,MAAM,CAAC,UAAU,EAAE;AACrB,YAAM,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC;AAC9B,YAAM,CAAC,UAAU,GAAG,KAAK,CAAC;AAC1B,YAAM,CAAC,SAAS,GAAG,CAAC,CAAC;KACtB;GACF;;;AAAC,AAGF,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;;;AAKd,MAAI,MAAM,CAAC,UAAU,EAAE;;;AAGrB,UAAM,CAAC,SAAS,GAAG,IAAI,CAAC;GACzB,MAAM;;;AAGL,UAAM,CAAC,SAAS,GAAG,IAAI,CAAC;GACzB;;;AAAA,AAGD,QAAM,CAAC,EAAE,IAAI,MAAM,CAAC,aAAa,CAAC;AAClC,QAAM,CAAC,EAAE,IAAI,MAAM,CAAC,aAAa;;;AAAC,AAGlC,QAAM,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS;;;AAAC,AAG9B,QAAM,CAAC,EAAE,IAAI,MAAM,CAAC,OAAO;;;AAAC,AAG5B,GAAC,CAAC,IAAI,CAAC,MAAM,CAAC;;;;AAAC,AAIf,MAAI,iBAAiB,GAAG,CAAC,CAAC,GAAG,CAC3B,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAC3C,UAAS,SAAS,EAAE,QAAQ,EAAE;;;;AAI5B,QAAI,SAAS,EAAE;AACb,UAAI,SAAS,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE;;;;AAI5C,cAAM,CAAC,UAAU,GAAG,IAAI;;;;;AAAC,AAKzB,cAAM,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;OAC7B,MACI,IAAI,SAAS,KAAK,KAAK,IAAI,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE;AAC9C,cAAM,CAAC,EAAE,GAAG,CAAC,CAAC;OACf,MACI,IAAI,SAAS,KAAK,OAAO,IAAI,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE;AAChD,cAAM,CAAC,EAAE,GAAG,CAAC,CAAC;OACf,MACI,IAAI,SAAS,KAAK,MAAM,IAAI,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE;AAC/C,cAAM,CAAC,EAAE,GAAG,CAAC,CAAC;OACf;;;;AAAA,AAID,UAAI,SAAS,KAAK,QAAQ,IAAI,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE;AAC3C,cAAM,CAAC,UAAU,GAAG,KAAK,CAAC;OAC3B;KACF;GACF,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA2CF,OAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAS,IAAI,EAAE;AACpD,QAAI,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,EAAC;AACtB,WAAK,IAAI,CAAC,CAAC;AACX,OAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACf,aAAO,KAAK,CAAC;KACd,MAAM;AACL,aAAO,IAAI,CAAC;KACb;GACF,CAAC;;;AAAC,AAGH,QAAM,CAAC,OAAO,GAAG,SAAS,GAAG,KAAK;;;;;AAAC,CAKpC;;;;;;;AAAA,AAOD,SAAS,SAAS,CAAC,KAAK,EAAE;;;AAGxB,MAAI,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE;;;;AAAC,AAItB,OAAK,CAAC,GAAG,GAAG,EAAE,CAAC;AACf,OAAK,CAAC,aAAa,GAAG,EAAE,CAAC;AACzB,OAAK,CAAC,SAAS,GAAG,EAAE,CAAC;AACrB,OAAK,CAAC,QAAQ,GAAG,EAAE;;;AAAC,AAGpB,OAAK,CAAC,MAAM,GAAG,IAAI;;;AAAC,AAGpB,SAAO,EAAE;;;AAAC,AAGV,cAAY,EAAE;;;AAAC,AAGf,UAAQ,EAAE;;;AAAC,AAGX,iBAAe,EAAE;;;;;;AAAC,AAMlB,WAAS,OAAO,GAAG;;;;AAIjB,QAAI,WAAW,GAAG,SAAd,WAAW;aAAS,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;KAAA;;;;;;;;AAAC,AAQhD,QAAI,aAAa,GAAG,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,YAAY;;;AAAC,AAG7D,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;;;AAGtC,UAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,YAAY;UAC1B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC;;AAAC,AAE3C,UAAI,IAAI,GAAG;AACT,SAAC,EAAE,CAAC;AACJ,SAAC,EAAE,CAAC;AACJ,YAAI,EAAE,EAAE;OACT;;;AAAC,AAGF,UAAI,WAAW,EAAE,EAAE;AACjB,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC;OACvB,MAAM;AACL,YAAI,CAAC,OAAO,GAAG,KAAK,CAAC;OACtB;;;AAAA,AAGD,WAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtB;GACF;;AAED,WAAS,YAAY,GAAG;;;;;AAKtB,QAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,CAAC,EAAE,CAAC,EAAK;AACvB,aAAO,CAAC,GAAI,CAAC,GAAG,KAAK,CAAC,YAAY,AAAC,CAAA;KACpC,CAAC;;AAEF,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAK;;;;AAItC,UAAI,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;UACvD,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;UACxD,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;UACnD,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;UACnD,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;;AAAC,AAG3D,UAAI,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,IAC7B,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,YAAY,GAAG,CAAC,IACjC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,aAAa,GAAG,CAAC,EAAE;AACrC,YAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;OACzB,MAAM;;;;;;AAML,YAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAE;;;AAG3B,cAAI,SAAS,IAAI,SAAS,CAAC,OAAO,KAAK,KAAK,EAAE;;;AAG5C,gBAAI,CAAC,OAAO,GAAG,OAAO;;;;;;AAAC,AAMvB,gBAAI,YAAY,EAAE;AAChB,kBAAI,YAAY,CAAC,OAAO,KAAK,MAAM,IAChC,YAAY,CAAC,OAAO,KAAK,OAAO,EAAE;AACnC,4BAAY,CAAC,OAAO,GAAG,KAAK,CAAC;eAC9B;aACF;WACF;SACF;OACF;KACF,CAAC;;;;;;;AAAC,AAOH,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAK;;AAEtC,UAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;;;AAG5B,YAAI,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,aAAK,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;OACrC;KACF,CAAC,CAAC;GACJ;;AAED,WAAS,QAAQ,GAAG;;;AAGlB,QAAI,iBAAiB,GAAG,SAApB,iBAAiB,GAAS;;;AAG5B,UAAI,WAAW,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjE,UAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC;;;;AAAC,AAIhD,WAAK,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC3C,aAAO,QAAQ,CAAC;KACjB;;;;AAAC,AAIF,QAAI,IAAI,GAAG,iBAAiB,EAAE,CAAC;AAC/B,QAAI,CAAC,IAAI,GAAG,QAAQ;;;AAAC,AAGrB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC1B,UAAI,GAAG,iBAAiB,EAAE,CAAC;AAC3B,UAAI,CAAC,IAAI,GAAG,UAAU,CAAC;KACxB;;AAAA,GAEF;;AAED,WAAS,eAAe,GAAG;;;;;;;;;AASzB,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAK;AACtC,UAAI,MAAM,YAAA;UACN,KAAK,YAAA;UACL,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS;UAC5B,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU;UAC7B,KAAK,GAAG,KAAK,CAAC,SAAS;UACvB,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;;AAE9B,cAAQ,IAAI,CAAC,OAAO;AAClB,aAAK,MAAM;AACT,eAAK,GAAG,CAAC,CAAC,KAAK,CACb,KAAK,CAAC,OAAO,CAAC,MAAM,EACpB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EACrB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EACrB,KAAK,EAAE,MAAM,CACd,CAAC;AACF,gBAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,gBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;;AAAA,AAER,aAAK,OAAO;AACV,eAAK,GAAG,CAAC,CAAC,KAAK,CACb,KAAK,CAAC,OAAO,CAAC,MAAM,EACpB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EACtB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EACtB,KAAK,EAAE,MAAM,CACd,CAAC;AACF,gBAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,gBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;;AAAA,AAER,aAAK,KAAK;;;AAGR,cAAI,OAAO,YAAA,CAAC;AACZ,cAAI,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;AAC/C,mBAAO,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;WAClC,MAAM;AACL,mBAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;WAChC;AACD,eAAK,GAAG,CAAC,CAAC,KAAK,CACb,KAAK,CAAC,OAAO,CAAC,MAAM,EACpB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EACpB,OAAO,EACP,KAAK,EAAE,MAAM,CACd,CAAC;AACF,gBAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,gBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,gBAAM;;AAAA,AAER,aAAK,QAAQ;AACX,gBAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;AACvB,gBAAM,CAAC,SAAS,GAAG,OAAO,CAAC;AAC3B,gBAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;AACpC,gBAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;AACrC,gBAAM,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;AAC/B,gBAAM,CAAC,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACjC,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;AAAA,OACT;KACF,CAAC;;;;AAAC,AAIH,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;;;;;AAKxB,UAAG,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;AACnB,YAAI,MAAM,YAAA;YACN,KAAK,YAAA;YACL,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC;YAClD,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC;YACnD,KAAK,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC;YAC3B,MAAM,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;;AAElC,gBAAQ,IAAI,CAAC,IAAI;AACf,eAAK,QAAQ;AACX,iBAAK,GAAG,CAAC,CAAC,KAAK,CAAC,sBAAsB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACxD,kBAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,kBAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACrB,kBAAM,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,kBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,kBAAM,CAAC,aAAa,GAAG,CAAC,CAAC;AACzB,kBAAM,CAAC,aAAa,GAAG,CAAC,CAAC;AACzB,kBAAM,CAAC,SAAS,GAAG,CAAC,CAAC;AACrB,kBAAM,CAAC,SAAS,GAAG,CAAC,CAAC;AACrB,kBAAM,CAAC,OAAO,GAAG,GAAG,CAAC;AACrB,kBAAM,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC;AACxB,kBAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,kBAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,kBAAM,CAAC,UAAU,GAAG,IAAI,CAAC;AACzB,iBAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,kBAAM;;AAAA,AAER,eAAK,UAAU;AACb,iBAAK,GAAG,CAAC,CAAC,KAAK,CAAC,sBAAsB,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACvD,kBAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,kBAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACrB,kBAAM,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,kBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;;AAAC,AAEzB,iBAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,kBAAM;AAAA,SACT;OACF;KACF,CAAC,CAAC;GACJ;;;;;;;;;;AAAA,AAUD,WAAS,WAAW,GAAG;;;;;;;;;AASrB,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AAC/B,UAAI,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;AAC3B,YAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC;AACpC,YAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC;AACrC,YAAM,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;AAC/B,YAAM,CAAC,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;;AAEjC,cAAQ,IAAI,CAAC,OAAO;AAClB,aAAK,MAAM;AACT,gBAAM,CAAC,SAAS,GAAG,OAAO,CAAC;AAC3B,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;;AAAA,AAER,aAAK,OAAO;AACV,gBAAM,CAAC,SAAS,GAAG,OAAO,CAAC;AAC3B,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;;AAAA,AAER,aAAK,KAAK;AACR,gBAAM,CAAC,SAAS,GAAG,MAAM,CAAC;AAC1B,gBAAM;;AAAA,AAER,aAAK,QAAQ;AACX,gBAAM,CAAC,SAAS,GAAG,MAAM,CAAC;AAC1B,eAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,gBAAM;AAAA,OACT;KACF,CAAC;;;;;AAAC,AAKH,SAAK,CAAC,GAAG,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;;;;;AAK/B,UAAG,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;AACnB,YAAI,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;AAC3B,cAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;AAC1D,cAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;AAC3D,cAAM,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;AACnC,cAAM,CAAC,MAAM,GAAG,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC;;AAErC,gBAAQ,IAAI,CAAC,IAAI;AACf,eAAK,QAAQ;AACX,kBAAM,CAAC,SAAS,GAAG,KAAK,CAAC;AACzB,kBAAM,CAAC,aAAa,GAAG,CAAC,CAAC;AACzB,kBAAM,CAAC,aAAa,GAAG,CAAC,CAAC;AACzB,kBAAM,CAAC,SAAS,GAAG,CAAC,CAAC;AACrB,kBAAM,CAAC,SAAS,GAAG,CAAC,CAAC;AACrB,kBAAM,CAAC,OAAO,GAAG,GAAG,CAAC;AACrB,kBAAM,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC;AACxB,kBAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,kBAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AACd,kBAAM,CAAC,UAAU,GAAG,IAAI,CAAC;AACzB,iBAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,kBAAM;;AAAA,AAER,eAAK,UAAU;AACb,kBAAM,CAAC,SAAS,GAAG,MAAM;;;AAAC,AAG1B,iBAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,kBAAM;AAAA,SACT;OACF;KACF,CAAC,CAAC;GACJ;;;AAAA,AAGD,SAAO,KAAK,CAAC;CACd","file":"platforms.js","sourcesContent":["/*\nLearn how to use Hexi to build a complex\nplatform game prototype\n*/\n\nlet thingsToLoad = [\n    \"images/platforms.png\",\n    \"fonts/puzzler.otf\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet level, world, player, output, score;\n\n//If you're not loading any files, start Hexi after\n//you've declared your global variables\ng.start();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Create a `level` object with some basic data about the game world\n  let level = {\n\n    //The height and width of the level, in tiles\n    widthInTiles: 16,\n    heightInTiles: 16,\n\n    //The width and height of each tile, in pixels\n    tilewidth: 32,\n    tileheight: 32,\n\n    //Tileset image properties. You could use a texture atlas, but \n    //let's go old-skool on this one and just blit from directly from\n    //an image\n    tileset: { \n\n      //The source image\n      source: \"images/platforms.png\",\n\n      //The x/y coordinates for the sprites on the tileset\n      player: [32, 32],\n      treasure: [32, 0],\n      cloud: [64, 0],\n      sky: [64, 32],\n      rock: [0, 32],\n      grass: [0, 0]\n    }\n  };\n\n  //Use the level to make the game world. See the `makeWorld` function\n  //below for details on how it works. It creates a random platform\n  //game environment procedurally. It returns a `group` sprite that\n  //contains all the game objects we'll need.\n  world = makeWorld(level);\n\n  //Get a reference to the `player` sprite\n  player = world.player;\n\n  //Add some text to display the score\n  output = g.text(\"score: \", \"16px puzzler\", \"white\", 32, 8);\n\n  //Intialize the game score\n  score = 0;\n\n  //Assign the player's keyboard keys\n  let leftArrow = g.keyboard(37),\n      rightArrow = g.keyboard(39),\n      spaceBar = g.keyboard(32);\n\n  //Left arrow key\n  leftArrow.press = () => {\n    if (rightArrow.isUp) {\n      player.accelerationX = -0.2;\n    }\n  };\n  leftArrow.release = () => {\n    if (rightArrow.isUp) {\n      player.accelerationX = 0;\n    }\n  };\n  //Right arrow key\n  rightArrow.press = () => {\n    if (leftArrow.isUp) {\n      player.accelerationX = 0.2;\n    }\n  };\n  rightArrow.release = () => {\n    if (leftArrow.isUp) {\n      player.accelerationX = 0;\n    }\n  };\n  //Space key (jump)\n  spaceBar.press = () => {\n    if (player.isOnGround) {\n      player.vy += player.jumpForce;\n      player.isOnGround = false;\n      player.frictionX = 1;\n    }\n  };\n\n  //Change the state to `play`\n  g.state = play;  \n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n  //Regulate the amount of friction acting on the player.\n  //The is the most important variable to set if you want to\n  //fine-tune the feel of the player control\n  if (player.isOnGround) {\n\n    //Add some friction if the player is on the ground\n    player.frictionX = 0.92;\n  } else {\n\n    //Add less friction if it's in the air\n    player.frictionX = 0.97;\n  }\n\n  //Apply the acceleration\n  player.vx += player.accelerationX; \n  player.vy += player.accelerationY;\n  \n  //Apply friction\n  player.vx *= player.frictionX; \n  \n  //Apply gravity\n  player.vy += player.gravity;\n  \n  //Move the player\n  g.move(player);\n\n  //Use the `hit` method to check for a collision between the \n  //player and the platforms\n  let playerVsPlatforms = g.hit(\n    player, world.platforms, true, false, false,\n    function(collision, platform) {\n\n      //Use the collision variable to figure out what side of the player\n      //is hitting the platform\n      if (collision) {\n        if (collision === \"bottom\" && player.vy >= 0) {\n\n          //Tell the game that the player is on the ground if \n          //it's standing on top of a platform\n          player.isOnGround = true;\n\n          //Neutralize gravity by applying its\n          //exact opposite force to the character's vy\n          //player.vy = -player.gravity;\n          player.vy = -player.gravity;\n        }\n        else if (collision === \"top\" && player.vy <= 0) {\n          player.vy = 0;\n        }\n        else if (collision === \"right\" && player.vx >= 0) {\n          player.vx = 0;\n        }\n        else if (collision === \"left\" && player.vx <= 0) {\n          player.vx = 0;\n        }\n\n        //Set `isOnGround` to `false` if the bottom of the player\n        //isn't touching the platform\n        if (collision !== \"bottom\" && player.vy > 0) {\n          player.isOnGround = false;\n        }\n      }\n    }\n  );\n\n  //Alternatively, use `forEach` and the lower-level\n  //`rectangleCollision` method to achieve the same thing\n  /*\n  //Check for collisions between the player and the platforms\n  world.platforms.forEach(function(platform) {\n\n    //Use `rectangleCollision` to prevent the player and platforms\n    //from overlapping  \n    let collision = g.rectangleCollision(player, platform);\n    \n    //Use the collision variable to figure out what side of the player\n    //is hitting the platform\n    if(collision === \"bottom\" && player.vy >= 0) {\n      //Tell the game that the player is on the ground if \n      //it's standing on top of a platform\n      player.isOnGround = true;\n      //Neutralize gravity by applying its\n      //exact opposite force to the character's vy\n      player.vy = -player.gravity;\n    }\n    else if(collision === \"top\" && player.vy <= 0) {\n      player.vy = 0;\n    }\n    else if(collision === \"right\" && player.vx >= 0) {\n      player.vx = 0;\n    }\n    else if(collision === \"left\" && player.vx <= 0) {\n      player.vx = 0;\n    }\n    //Set `isOnGround` to `false` if the bottom of the player\n    //isn't touching the platform\n    if(collision !== \"bottom\" && player.vy > 0) {\n      player.isOnGround = false;\n    }\n  });\n  */\n\n  //Treasure collection\n  //Use `filter` and `hit` to check whether the player is touching a\n  //star. If it is, add 1 to the score, remove the `star` sprite and filter it out of the \n  //`world.treasure` array\n  world.treasure = world.treasure.filter(function(star) {\n    if (g.hit(player, star)){\n      score += 1;\n      g.remove(star);\n      return false;\n    } else {\n      return true;\n    } \n  });\n\n  //Display the score\n  output.content = \"score: \" + score;\n\n  //That's it! The game code is finished here\n  //Just keep reading if you want to find out how the \n  //`makeWorld` function works\n}\n\n//`makeWorld` is a function that uses data from the level` object\n//to create a random platform game world procedurally. There are many\n//way you could do this, so this is just an idea to help you get\n//started making your own procedural game levels \n\nfunction makeWorld(level) {\n\n  //create the `world` object\n  let world = g.group();\n\n  //Add some arrays to the world that will store the objects that we're\n  //going to create\n  world.map = [];\n  world.itemLocations = [];\n  world.platforms = [];\n  world.treasure = [];\n\n  //Important world object that we're going to create\n  world.player = null;\n\n  //1. Make the map\n  makeMap();\n\n  //2. Terraform the map\n  terraformMap();\n\n  //3. Add the items\n  addItems();\n\n  //4. Make the sprites\n  makeTileSprites();\n\n  //If you want to see what the world looks likes using simple shapes,\n  //use `makeSprites` instead of `makeTileSprites`\n  //makeSprites();\n\n  function makeMap() {\n    //The `cellIsAlive` helper function.\n    //Give each cell a 1 in 4 chance to live. If it's \"alive\", it will\n    //be rock, if it's \"dead\" it will be sky\n    let cellIsAlive = () => g.randomInt(0, 3) === 0;\n    \n    //A loop creates a `cell` object for each \n    //grid cell on the map. Each `cell` has a name, and a `x` and `y` \n    //position. The loop uses the `cellIsAlive` function to\n    //give each cell a 25% chance of being \"rock\" and a 75% \n    //chance of being \"sky\".\n    //First, figure out the number of cells in the grid\n    let numberOfCells = level.heightInTiles * level.widthInTiles;\n\n    //Next, create the cells in a loop\n    for (let i = 0; i < numberOfCells; i++) {\n\n      //Figure out the x and y position\n      let x = i % level.widthInTiles,\n          y = Math.floor(i / level.widthInTiles);\n      //Create the `cell` object \n      let cell = {\n        x: x,\n        y: y,\n        item: \"\"\n      };\n\n      //Decide whether the cell should be \"rock\" or \"sky\"\n      if (cellIsAlive()) {\n        cell.terrain = \"rock\";\n      } else {\n        cell.terrain = \"sky\";\n      }\n\n      //Push the cell into the world's `map` array\n      world.map.push(cell);\n    }\n  }\n\n  function terraformMap() {\n\n    //Improve the map by adding a border and grass.\n    //A `getIndex` helper function to convert the cell x and y position to an\n    //array index number\n    let getIndex = (x, y) => {\n      return x + (y * level.widthInTiles)\n    };\n    \n    world.map.forEach((cell, index, map) => {\n\n      //Some variables to help find the cells to the left, right, below\n      //and above the current cell\n      let cellTotheLeft = world.map[getIndex(cell.x - 1, cell.y)],\n          cellTotheRight = world.map[getIndex(cell.x + 1, cell.y)],\n          cellBelow = world.map[getIndex(cell.x, cell.y + 1)],\n          cellAbove = world.map[getIndex(cell.x, cell.y - 1)],\n          cellTwoAbove = world.map[getIndex(cell.x, cell.y - 2)];\n      \n      //If the cell is on the border of the map, change its name to \"border\"\n      if (cell.x === 0 || cell.y === 0 \n      || cell.x === level.widthInTiles - 1 \n      || cell.y === level.heightInTiles - 1) { \n        cell.terrain = \"border\";\n      } else { \n\n        //If the cell isn't on the border, find out if we can\n        //grow some grass on it. Any rock with a sky cell above\n        //it should be made into grass. Here's how to figure this out:\n        //1. Is the cell a rock?\n        if (cell.terrain === \"rock\") {\n\n          //2. Is there sky directly above it?\n          if (cellAbove && cellAbove.terrain === \"sky\") {\n\n            //3. Yes there is, so change its name to \"grass\" \n            cell.terrain = \"grass\";\n\n            //4. Make sure there are 2 sky cells above grass cells\n            //so that it's easy to jump to higher platforms\n            //without bumping your head. Change any rock cells that are\n            //2 above the current grass cell to \"sky\"\n            if (cellTwoAbove) {\n              if (cellTwoAbove.terrain === \"rock\"\n              || cellTwoAbove.terrain === \"grass\") {\n                cellTwoAbove.terrain = \"sky\";\n              } \n            }\n          }\n        }\n      }\n    });\n\n    //We now have the finished map.\n    //Next, we're going to loop through the map one more time \n    //to find all the item location cells and push them into the \n    //itemLocations array. itemLocations is a list of cells that\n    //we'll use later to place the player and treasure\n    world.map.forEach((cell, index, map) => {\n      //Is the cell a grass cell?\n      if (cell.terrain === \"grass\") {\n        //Yes, so find the cell directly above it and push it\n        //into the itemLocations array\n        let cellAbove = world.map[getIndex(cell.x, cell.y - 1)];\n        world.itemLocations.push(cellAbove);\n      }\n    });  \n  }\n\n  function addItems() {\n\n    //The `findStartLocation` helper function returns a random cell\n    let findStartLocation = () => {\n\n      //Randomly choose a start location from the itemLocations array\n      let randomIndex = g.randomInt(0, world.itemLocations.length - 1);\n      let location = world.itemLocations[randomIndex];\n\n      //Splice the cell from the array so we don't choose the\n      //same cell for another item\n      world.itemLocations.splice(randomIndex, 1);\n      return location;\n    };\n\n    //1. Add the player\n    //Find a random cell from the itemLocations array\n    let cell = findStartLocation();\n    cell.item = \"player\";\n    \n    //2. Add 3 treasure boxes\n    for (let i = 0; i < 3; i++) {\n      cell = findStartLocation();\n      cell.item = \"treasure\";\n    }\n    //console.table(world.map);\n  }\n\n  function makeTileSprites() {\n    //The map and gameObjects arrays are complete, so we can\n    //now use them to create the sprites. \n    //All the map sprites will use the same x, y, width and \n    //height values as the cell objects in those arrays. \n    //rock, grass and border sprites will be pushed into the \n    //`platforms` array so that use them for collision in the game loop\n    \n    //Make the terrain\n    world.map.forEach((cell, index, map) => {\n      let sprite,\n          frame,\n          x = cell.x * level.tilewidth,\n          y = cell.y * level.tileheight,\n          width = level.tilewidth,\n          height = level.tileheight;\n\n      switch (cell.terrain) {\n        case \"rock\":\n          frame = g.frame(\n            level.tileset.source, \n            level.tileset.rock[0], \n            level.tileset.rock[1], \n            width, height\n          );\n          sprite = g.sprite(frame);\n          sprite.setPosition(x, y);\n          world.platforms.push(sprite);\n          break;\n          \n        case \"grass\":\n          frame = g.frame(\n            level.tileset.source, \n            level.tileset.grass[0], \n            level.tileset.grass[1], \n            width, height\n          );\n          sprite = g.sprite(frame);\n          sprite.setPosition(x, y);\n          world.platforms.push(sprite);\n          break;\n          \n        case \"sky\":\n          //Add clouds every 6 cells and only on the top\n          //80% of the level\n          let sourceY;\n          if (index % 6 === 0 && index < map.length * 0.8) { \n            sourceY = level.tileset.cloud[1];\n          } else {\n            sourceY = level.tileset.sky[1];\n          }\n          frame = g.frame(\n            level.tileset.source, \n            level.tileset.sky[0], \n            sourceY,\n            width, height\n          );\n          sprite = g.sprite(frame);\n          sprite.setPosition(x, y);\n          break;\n        \n        case \"border\":\n          sprite = g.rectangle();\n          sprite.fillStyle = \"black\";\n          sprite.x = cell.x * level.tilewidth;\n          sprite.y = cell.y * level.tileheight;\n          sprite.width = level.tilewidth;\n          sprite.height = level.tileheight;\n          world.platforms.push(sprite);\n          break;\n      }\n    });\n\n    //Make the game items. (Do this after the terrain so\n    //that the items sprites display above the terrain sprites)\n    world.map.forEach(cell => {\n\n      //Each game object will be half the size of the cell.\n      //They should be centered and positioned so that they align\n      //with the bottom of cell\n      if(cell.item !== \"\") {\n        let sprite,\n            frame,\n            x = cell.x * level.tilewidth + level.tilewidth / 4,\n            y = cell.y * level.tileheight + level.tilewidth / 2,\n            width = level.tilewidth / 2,\n            height = level.tileheight / 2;\n        \n        switch (cell.item) {\n          case \"player\":\n            frame = g.frame(\"images/platforms.png\", 32, 32, 32, 32);\n            sprite = g.sprite(frame);\n            sprite.width = width;\n            sprite.height = height;\n            sprite.setPosition(x, y);\n            sprite.accelerationX = 0;\n            sprite.accelerationY = 0;\n            sprite.frictionX = 1;\n            sprite.frictionY = 1;\n            sprite.gravity = 0.3;\n            sprite.jumpForce = -6.8;\n            sprite.vx = 0;\n            sprite.vy = 0;\n            sprite.isOnGround = true;\n            world.player = sprite;\n            break;\n          \n          case \"treasure\":\n            frame = g.frame(\"images/platforms.png\", 32, 0, 32, 32);\n            sprite = g.sprite(frame);\n            sprite.width = width;\n            sprite.height = height;\n            sprite.setPosition(x, y);\n            //Push the treasure into the treasures array\n            world.treasure.push(sprite);\n            break;\n        }\n      }\n    }); \n  }\n\n  //OPTIONAL: the `makeSprites` function\n  //`makeSprites` is an alternative to `makeTileSprites` that creates\n  //the sprites from simple squares and colors, in the style of a\n  //Commodore 64 or Vic 20.\n  //To see this in action: comment-out the `makeTileSprites` function\n  //call at the head of the `makeWorld` function, and un-comment the\n  //`makeSprites` function call in the code just after it\n\n  function makeSprites() {\n    //The map and gameObjects arrays are complete, so we can\n    //now use them to create the sprites. \n    //All the map sprites will use the same x, y, width and \n    //height values as the cell objects in those arrays. \n    //rock, grass and border sprites will be pushed into the \n    //`platforms` array so that use them for collision in the game loop\n    \n    //Make the terrain\n    world.map.forEach(function(cell) {\n      let sprite = g.rectangle();\n      sprite.x = cell.x * level.tilewidth;\n      sprite.y = cell.y * level.tileheight;\n      sprite.width = level.tilewidth;\n      sprite.height = level.tileheight;\n\n      switch (cell.terrain) {\n        case \"rock\":\n          sprite.fillStyle = \"black\";\n          world.platforms.push(sprite);\n          break;\n          \n        case \"grass\":\n          sprite.fillStyle = \"green\";\n          world.platforms.push(sprite);\n          break;\n          \n        case \"sky\":\n          sprite.fillStyle = \"cyan\";\n          break;\n        \n        case \"border\":\n          sprite.fillStyle = \"blue\";\n          world.platforms.push(sprite);\n          break;\n      }\n    });\n\n    //Make the game items. (Do this after the terrain so\n    //that the items sprites display above the terrain sprites)\n\n    world.map.forEach(function(cell) {\n\n      //Each game object will be half the size of the cell.\n      //They should be centered and positioned so that they align\n      //with the bottom of cell\n      if(cell.item !== \"\") {\n        let sprite = g.rectangle();\n        sprite.x = cell.x * level.tilewidth + level.tilewidth / 4;\n        sprite.y = cell.y * level.tileheight + level.tilewidth / 2;\n        sprite.width = level.tilewidth / 2;\n        sprite.height = level.tileheight / 2;\n        \n        switch (cell.item) {\n          case \"player\":\n            sprite.fillStyle = \"red\";\n            sprite.accelerationX = 0;\n            sprite.accelerationY = 0;\n            sprite.frictionX = 1;\n            sprite.frictionY = 1;\n            sprite.gravity = 0.3;\n            sprite.jumpForce = -6.8;\n            sprite.vx = 0;\n            sprite.vy = 0;\n            sprite.isOnGround = true;\n            world.player = sprite;\n            break;\n          \n          case \"treasure\":\n            sprite.fillStyle = \"gold\";\n\n            //Push the treasure into the treasures array\n            world.treasure.push(sprite);\n            break;\n        }\n      }\n    }); \n  }\n\n  //Return the `world` object\n  return world;\n}\n\n"]}