{"version":3,"sources":["../src/rectangleCollision.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;;;;AAAC,AAI9B,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,IAAI,YAAA;IAAE,GAAG,YAAA;IAAE,OAAO,YAAA;;;;AAAC,AAIvB,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,SAAS,KAAK,GAAG;;;AAGf,MAAI,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;AACnC,GAAC,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,GAAG,EAAE,EAAE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC;AACnE,MAAI,CAAC,SAAS,GAAG,IAAI;;;AAAC,AAGtB,KAAG,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;AACjC,GAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,GAAE,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,GAAE,EAAE,CAAC,CAAC;AAC/D,KAAG,CAAC,SAAS,GAAG,IAAI;;;AAAC,AAGrB,SAAO,GAAG,CAAC,CAAC,IAAI,CACd,qBAAqB,EACrB,iBAAiB,EACjB,OAAO,EAAE,EAAE,EAAE,EAAE,CAChB;;;AAAC,AAGF,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;AAGd,SAAO,CAAC,OAAO,GAAG,qBAAqB;;;;;AAAC,AAKxC,MAAI,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;;;;;;;;AAAC,AAQjC,MAAG,SAAS,EAAE;AACZ,WAAO,CAAC,OAAO,GAAG,YAAY,CAAC;GAChC;CACF","file":"rectangleCollision.js","sourcesContent":["/*\nLearn how to test for a collision between a two circles\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(256, 256, setup);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet blue, red, message;\n\n//If you're not loading any files, start Hexi after\n//you've declared your global variables\ng.start();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make a blue square\n  blue = g.rectangle(64, 64, \"blue\");\n  g.stage.putCenter(blue, blue.halfWidth + 16, blue.halfHeight + 16);\n  blue.draggable = true;\n  \n  //Make a red square\n  red = g.rectangle(64, 64, \"red\");\n  g.stage.putCenter(red, -red.halfWidth -16, -red.halfWidth -16);\n  red.draggable = true;\n\n  //Add some text \n  message = g.text(\n    \"Drag the circles...\", \n    \"16px sans-serif\",\n    \"black\", 10, 10\n  );\n    \n  //Change the state to `play`\n  g.state = play;  \n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n  //Set the default message content \n  message.content = \"Drag the squares...\";\n\n  //Check for a collision between the blue and red squares.\n  //The collision variable will be `true`\n  //if there's a collision and `false` if there isn't\n  let collision = g.hit(blue, red);\n\n  //Alternatively, you can use the lower-level hitTestRectangle method.\n  //`hitTestRectangle` arguments:\n  //spriteOne, spriteTwo\n  //let collision = g.hitTestRectangle(blue, red);\n\n  //Change the message if there's a collision between the circles\n  if(collision) {\n    message.content = \"Collision!\"; \n  }\n}\n\n\n"]}