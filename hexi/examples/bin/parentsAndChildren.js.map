{"version":3,"sources":["../src/parentsAndChildren.js"],"names":[],"mappings":"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","file":"parentsAndChildren.js","sourcesContent":["/*\nThis example illustrates how you can use `addChild` and\n`removeChild` to make sprites the children of other sprites.\nAll sprites have local and global x and y coordinates. The local\ncoordinates, `x` and `y`, are relative to the top left corner of the\nsprite's parent. The global coordinates, `gx` and `gy` are relative\nto the top left corner of the `stage`. (The `stage` is the root\ncontainer that contains all the sprites in the game.)\n*/\n\n//The files you want to load\nlet thingsToLoad = [\n  \"images/cat.png\",\n  \"images/star.png\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\ng.start();\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet cat, square, message, star, ball, line, \n    localMessage, globalMessage, collisionMessage;\n\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make a square and position it\n  square = g.rectangle(256, 256, \"lightblue\", \"black\", 1);\n\n  //Set the square's pivot point to its center, so that it will rotate\n  //around its center.\n  //IMPORTANT: Shifting the pivot point doesn't move the position of\n  //the sprite, but it does shift its x/y origin point. The x/y point of the\n  //square will now be at its center.\n  square.setPivot(0.5, 0.5);\n\n  //Use the stage's `putCenter` method to put the square\n  //in the center of the stage. You can also use `putTop`,\n  //`putRight`, `putBottom` and `putLeft`. If you want to offset\n  //the position, use x and y offset values as the second and third\n  //arguments: `sprite.putTop(anySprite, -10, -5)` \n  g.stage.putCenter(square);\n\n  //Add a drop shadow filter to the square\n  let shadow = g.dropShadowFilter();\n  shadow.alpha = 0.4;\n  shadow.blur = 6;\n  shadow.distance = 8;\n  square.filters = [shadow];\n\n  //Make the cat sprite\n  cat = g.sprite(\"images/cat.png\");\n\n  //Control the cat with the keyboard\n  g.arrowControl(cat, 5);\n\n  //Make a star sprite and add it as a child of the cat.\n  //Set the star's pivot point to 0.5 so that it will rotate around\n  //its center\n  star = g.sprite(\"images/star.png\");\n  star.setPivot(0.5, 0.5);\n\n  //Add the star to the cat and position it to the right of the cat  \n  cat.addChild(star);\n  cat.putRight(star);\n\n  //Add the cat as a child of the square, and put it at the bottom of\n  //the square\n  square.addChild(cat);\n  square.putBottom(cat, 0, -cat.height);\n\n  //Create some text that we'll use to display the cat's local position\n  localMessage = g.text(\"Test\", \"14px Futura\", \"black\");\n\n  //Add the text as a child of the square\n  square.addChild(localMessage);\n\n  //Use the text's local `x` and local `y` values to set its top left\n  //corner position relative to the square's top left corner. Because\n  //the square's pivot point was set to its center, its x/y origin\n  //point has also been moved to it's center. That means if you want\n  //to position something at the square's top left corner you need to\n  //subtract half the square's width and height.\n  localMessage.x = -square.halfWidth + 6;\n  localMessage.y = -square.halfHeight + 2;\n\n  //Add an `angle` property to the star that we'll use to \n  //help make the star rotate around the cat\n  star.angle = 0;\n\n  //Create some text that will display the cat's global position\n  globalMessage = g.text(\"This is some text to start\", \"14px Futura\", \"black\");\n  globalMessage.x = 6;\n  globalMessage.y = g.canvas.height - globalMessage.height - 4;\n\n\n  //Add some text to display the side on which\n  //the cat is colliding with the edges of the square\n  collisionMessage = g.text(\"Use the arrow keys to move...\", \"16px Futura\", \"black\", 4);\n\n  //If you change the square's `alpha`, the child sprites inside it will\n  //be similarly affected\n  //square.alpha = 0.2;\n\n  //Change the state to `play`\n  g.state = play;  \n  \n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n  //Move the cat\n  g.move(cat);\n\n  //You can also move a sprite the good old-fashioned way\n  //cat.x += cat.vx;\n  //cat.y += cat.vy;\n  \n  //Rotate the square\n  square.rotation += 0.005;\n\n  //Display the cat's local `x` and local `y` coordinates. These are\n  //relative to the square's center point. (The square is the cat's\n  //parent.) If we hadn't changed the square's pivot point, the cat's\n  //x and y values would have been relative to the square's top left corner\n  localMessage.content = \n    `Local position: cat.x: ${Math.round(cat.x)}, cat.y: ${Math.round(cat.y)}`;\n\n  //Display the cat's global `gx` and global `gy` coordinates. These are\n  //relative to the `stage`, which is the root container for all the\n  //sprites and groups.\n  globalMessage.content = \n    `Global position: cat.gx: ${Math.round(cat.gx)}, cat.gy: ${Math.round(cat.gy)}`;\n\n  //Contain the cat inside the square's boundary\n  let catHitsEdges = g.contain(cat, square);\n\n  //Display the edge of the canvas that the cat hit\n  if (catHitsEdges) {\n\n    //Find the collision side\n    let collisionSide = \"\";\n    if (catHitsEdges.has(\"left\")) collisionSide = \"left\";\n    if (catHitsEdges.has(\"right\")) collisionSide = \"right\";\n    if (catHitsEdges.has(\"top\")) collisionSide = \"top\";\n    if (catHitsEdges.has(\"bottom\")) collisionSide = \"bottom\";\n\n    //Display it\n    collisionMessage.content = `The cat hit the ${collisionSide} of the square`;\n  }\n  //Make the star rotate\n  star.rotation += 0.2;\n\n  //Update the star's angle \n  star.angle += 0.05;\n\n  //The `rotateAroundSprite` method lets you rotate a sprite around\n  //another sprite. The first argument is the sprite you want to\n  //rotate, and the second argument is the sprite around which it\n  //should rotate. The third argument is the distance \n  g.rotateAroundSprite(star, cat, 64, star.angle);\n\n  //if you want the rotation to happen around a point that's offset\n  //from the center of the sprite, change the center sprite's x and y pivot values\n  //to point that you need\n}\n\n"]}