{"version":3,"sources":["../src/tweening.js"],"names":[],"mappings":"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","file":"tweening.js","sourcesContent":["/*\nHexi has a suite of easy-to-use and versatile tweening\neffects for games. See the code below to find out how \nto use them.\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(1024, 512, setup, [\"images/animals.json\"]);\ng.start();\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet cat1, cat2, hedgehog1, hedgehog2, tiger1, tiger2,\n    text1, text2, text3, text4, text5, text6;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Create some sprites \n  cat1 = g.sprite(\"cat.png\");\n  text1 = g.text(\"slide\", \"20px Futura\", \"black\");\n  tiger1 = g.sprite(\"tiger.png\");\n  tiger1.setPosition(128, 128);\n  text2 = g.text(\"slide with bounce\", \"20px Futura\", \"black\");\n  hedgehog1 = g.sprite(\"hedgehog.png\");\n  hedgehog1.setPosition(20, 300);\n  text3 = g.text(\"pulse\", \"20px Futura\", \"black\");\n  cat2 = g.sprite(\"cat.png\");\n  cat2.setPosition(212, 300);\n  text4 = g.text(\"breathe\", \"20px Futura\", \"black\");\n  tiger2 = g.sprite(\"tiger.png\");\n  tiger2.setPosition(404, 300);\n  text5 = g.text(\"strobe\", \"20px Futura\", \"black\");\n  hedgehog2 = g.sprite(\"hedgehog.png\");\n  hedgehog2.setPosition(596, 300);\n  text6 = g.text(\"wobble\", \"20px Futura\", \"black\");\n\n  //Add the text to the sprites\n  cat1.addChild(text1);\n  cat1.putRight(text1, 32);\n  tiger1.addChild(text2);\n  tiger1.putBottom(text2, 32);\n  hedgehog1.addChild(text3);\n  hedgehog1.putBottom(text3, -8, 16);\n  cat2.addChild(text4);\n  cat2.putBottom(text4, -32, 16);\n  tiger2.addChild(text5);\n  tiger2.putBottom(text5, -32, 16);\n  hedgehog2.addChild(text6);\n  hedgehog2.putBottom(text6, -32, 16);\n\n  /*Slide effects*/\n\n  /*\n  Make the cat move back and forth. Create a new tween object\n  using the `slide` method.\n\n  `slide` arguments: sprite, endX, endY, durationInFrames,\n  easingType, yoyo?, delayInMilleseconsBeforeRepeating\n\n  If you want the effect to repeat in a continuous loop, just\n  set `yoyo` (the 6th argument) to `true`.\n\n  (Only the first 3 arguments are required, the rest are optional.)\n  The easing type (the 5th argument) can be any of the following\n  string values:\n\n    \"linear\"\n    \"smoothstep\" (the default value)\n    \"smoothstepSquared\"\n    \"smoothstepCubed\"\n    \"acceleration\"\n    \"accelertationCubed\"\n    \"deceleration\"\n    \"decelerationCubed\"\n    \"sine\"\n    \"sineSquared\"\n    \"sineCubed\"\n    \"inverseSine\"\n    \"inverseSineSquared\"\n    \"inverseSineCubed\"\n\n  Try using different easing types to see the effect.\n  */\n\n  let catSlide = g.slide(cat1, 400, 0, 60, \"smoothstep\", true, 0);\n\n  //Tween objects have an `onComplete` callback function that you can\n  //define. It will run when the tween is finished. Use it like this:\n\n  //catSlide.onComplete = () => console.log(\"Cat slide complete\");\n\n  //A special easing type (the 5th argument) called \"bounce\" has two\n  //additional values you can assign: a start magnitude and an end\n  //magnitude. This gives the tween a bit of extra bounce at its start\n  //and end points. \"5\" and \"-5\" are good values to start, but\n  //experiment with different values\n  let tigerSlide = g.slide(tiger1, 528, tiger1.y, 120, \"bounce 5 -5\", true, 0);\n\n  /* Fade effects */\n\n  //Use `pulse` to make a sprite fade in and out.\n  //`pulse` arguments: sprite, durationInFrames, minimumAlphaValue\n  let hedgehogPulse = g.pulse(hedgehog1, 120, 0.3); \n\n  //Optionally, find out when the each portion of the tween has\n  //completed by using an `onComplete` method.\n  //hedgehogPulse.onComplete = () => {console.log(\"Hedgehog pulse complete\")};\n\n  /*\n  You can also use `fadeIn` and `fadeOut`, using this format:\n  var spriteFade = g.fadeIn(sprite, durationInFrames);\n  */\n\n  /* Scale effects */\n  //These scale effects look best if the sprites have their\n  //`pivotX` and `pivotY` properties set to 0.5\n  cat2.setPivot(0.5, 0.5);\n  tiger2.setPivot(0.5, 0.5);\n  hedgehog2.setPivot(0.5, 0.5);\n\n  //Use `breathe` to scale a sprite in and out in a simulated\n  //breathing effect.\n  //`breathe` arguments: sprite, finalXScale, finalYScale, \n  //durationInFrames, delayInMillsecondsBeforeRepeating\n  let catBreathe = g.breathe(cat2, 1.4, 1.4, 60, true, 300);\n\n  /*\n  You can also use `scale` to smoothly scale a sprite by a fixed\n  scaled amount. Use this format:\n  var spriteScale = g.scale(sprite, finalScaleX, finalScaleY, frames);\n  */\n\n  //Use `strobe` to create a flashing effect.\n  //`strobe` arguments: sprite, scaleFactor, startMagnitude, endMagnitude, \n  //frames, yoyo?, delayInMillisecondsBeforeRepeating\n  let tigerStrobe = g.strobe(tiger2, 1.3, 10, 20, 10);\n\n  //Use `wobble` to make a sprite wobble like a plate of jelly.\n  //Use the default values, or experiment with your own values\n  //to find an effect you like.\n  //`wobble` arguments: sprite, scaleFactorX, scaleFactorY, frames,\n  //xStartMagnitude, xEndMagnitude, yStartMagnitude, yEndMagnitude,\n  //friction, yoyo, delayBeforeRepeat\n \n  let hedgehogWobble = g.wobble(hedgehog2, 1.8, 1.8);\n\n  //Tweens are updated independently in Hexi's internal \n  //game engine loop, so there's no need to update them in\n  //your own `play` state to make them work.\n}\n\n\n"]}