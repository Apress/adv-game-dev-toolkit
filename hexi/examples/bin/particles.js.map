{"version":3,"sources":["../src/particles.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,CAAC,CAAC,eAAe,GAAG,OAAO,CAAC;AAC5B,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,SAAS,KAAK,GAAG;;AAEf,GAAC,CAAC,OAAO,CAAC,KAAK,GAAG,YAAM;AACtB,KAAC,CAAC,eAAe,CACf,CAAC,CAAC,OAAO,CAAC,CAAC,EACX,CAAC,CAAC,OAAO,CAAC,CAAC,EACX;aAAM,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC;KAAA,EACjC,CAAC,CAAC,KAAK,EACP,EAAE,CACH,CAAC;GACH;;;AAAC,AAGF,GAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3D","file":"particles.js","sourcesContent":["/*\nCreate particles with a versatile method called function called\n`createParticles`. It's all you'll need for most 2D action games.\nHere's an example of how to use it to \nproduce a starburst effect at the pointer's x and y position.\n\n    g.createParticles(\n      g.pointer.x,                             //The particle’s starting x position\n      g.pointer.y,                             //The particle’s starting y position\n      () => g.sprite(\"images/star.png\"),       //Particle function\n      g.stage,                                 //The container group to add it to\n      20,                                      //Number of particles\n      0.1,                                     //Gravity\n      true,                                    //Random spacing\n      0, 6.28,                                 //Min/max angle\n      12, 24,                                  //Min/max size\n      1, 2,                                    //Min/max speed\n      0.005, 0.01,                             //Min/max scale speed\n      0.005, 0.01,                             //Min/max alpha speed\n      0.05, 0.1                                //Min/max rotation speed\n    );\n\nYou can see that most of those arguments describe range between \nthe minimum and maximum values that should be used to change \nthe sprites’ speed, rotation, scale and alpha.\nYou can also assign the number of particles that should be created,\nand add optional gravity. \n\nYou can make particles using any sprites by customizing the third argument. \nJust supply a function that returns the kind of sprite you want to use for each particle:\n\n    () => g.sprite(\"images/star.png\"),\n\nIf you supply a sprite that has multiple frames, the `createParticles` \nmethod will automatically choose a random frame for each particle.\n\nThe minimum and maximum angle values are important for defining the \ncircular spread of particles as they radiate out from the origin point. \nFor a completely circular explosion effect, use a minimum angle \nof 0, and a maximum angle for 6.28.\n\n    0, 6.28\n\n(These numbers values are radians; the equivalent in degrees is 0 and 360.) \n0 starts at the 3 o’clock position, pointing directly to the right. 3.14 \nis the 9 o’clock position, and 6.28 takes you around back to 0 again.\n\nIf you want to constrain the particles to a narrower angle range, just supply \nthe minimum and maximum values that describe that range. Here are values \nyou could use to constrain the angle to a pizza-slice with the crust pointing left.\n\n2.4, 3.6\n\nYou could use a constrained angle range like this to create a particle stream, \nlike a fountain or rocket engine flames. By carefully choosing the sprite for \nthe particle and finely adjusting each parameter, you can use this \nall-purpose `createParticles` method to simulate everything from liquid to fire. \n*/\n\n//Create a new Hexi instance, and start it.\n//Load the texture atlas that inlcudes the animation frames you want\n//to load\nlet g = hexi(256, 256, setup, [\"images/star.png\"]);\ng.start();\n\n//Set the background color and scale the canvas\ng.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  g.pointer.press = () => {\n    g.createParticles(\n      g.pointer.x, \n      g.pointer.y, \n      () => g.sprite(\"images/star.png\"),\n      g.stage,\n      50\n    );\n  };\n\n  //Add text instructions\n  g.text(\"Tap to make stars\", \"14px Futura\", \"white\", 6, 4);  \n}\n\n\n"]}