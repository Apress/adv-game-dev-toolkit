{"version":3,"sources":["../src/bouncingBall.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;;;;AAAC,AAI9B,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,IAAI,IAAI,YAAA;;;;AAAC,AAIT,CAAC,CAAC,KAAK,EAAE;;;AAAC,AAGV,SAAS,KAAK,GAAG;;;;AAIf,MAAI,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;;;AAAC,AAGxD,MAAI,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7B,MAAI,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;;;AAAC,AAG7B,MAAI,CAAC,OAAO,GAAG,GAAG,CAAC;AACnB,MAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,MAAI,CAAC,SAAS,GAAG,CAAC;;;;;;;AAAC,AAOnB,MAAI,CAAC,IAAI,GAAG,GAAG;;;AAAC,AAGhB,MAAI,CAAC,aAAa,GAAG,GAAG,CAAC;AACzB,MAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC;AAC1B,MAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnB,MAAI,CAAC,SAAS,GAAG,CAAC;;;;AAAC,AAInB,GAAC,CAAC,OAAO,CAAC,GAAG,GAAG,YAAM;;;AAGpB,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;AACtC,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU;;;AAAC,AAGvC,QAAI,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC/B,QAAI,CAAC,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;GAChC;;;AAAC,AAGF,MAAI,OAAO,GAAG,CAAC,CAAC,IAAI,CAClB,4CAA4C,EAC5C,aAAa,EAAE,OAAO,EACtB,CAAC,EAAE,CAAC,CACL;;;AAAC,AAGF,GAAC,CAAC,KAAK,GAAG,IAAI,CAAC;CAChB;;;AAAA,AAGD,SAAS,IAAI,GAAG;;;AAGd,MAAI,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO;;;;AAAC,AAIxB,MAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS;;;;AAAC,AAI1B,MAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;AAClB,MAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;;;;;;;;;;AAAC,AAUlB,MAAI,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC;;;;;AAAC,AAK/C,MAAI,SAAS,EAAE;AACb,QAAI,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;;;AAG3B,UAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KACvB,MAAM;;;;;;AAML,UAAI,CAAC,SAAS,GAAG,CAAC,CAAC;KACpB;GACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CA6CF","file":"bouncingBall.js","sourcesContent":["/*\nLearn how to make a ball bounce around the canvas\nwith gravity, friction and mass.\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet ball;\n\n//If you 're not loading any files, start Hexi after\n//you've decalred your global variables\ng.start();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make a ball sprite.\n  //circle arguments: diameter, fillStyle, strokeStyle, lineWidth, x, y\n  ball = g.circle(64, \"powderBlue\", \"black\", 2, 192, 256); \n\n  //Set the ball's velocity to 0\n  ball.vx = g.randomInt(5, 15);\n  ball.vy = g.randomInt(5, 15);\n\n  //Physics properties\n  ball.gravity = 0.3;\n  ball.frictionX = 1; \n  ball.frictionY = 0;\n\n  //Adding mass will let the `contain` method\n  //make the ball gradually lose momentum in a \n  //very natural looking way each time the ball\n  //hits a surface. Value between 1.1 and 1.4 work\n  //well for mass\n  ball.mass = 1.3;\n\n  //Acceleration and friction properties\n  ball.accelerationX = 0.2;\n  ball.accelerationY = -0.2;\n  ball.frictionX = 1;\n  ball.frictionY = 1;\n\n  //When the pointer is tapped, center the ball\n  //over the pointer and give it a new random velocity\n  g.pointer.tap = () => {\n    \n    //Position the ball over the pointer\n    ball.x = g.pointer.x - ball.halfWidth;\n    ball.y = g.pointer.y - ball.halfHeight;\n\n    //Give it a random velocity\n    ball.vx = g.randomInt(-15, 15);\n    ball.vy = g.randomInt(-15, 15);\n  };\n\n  //Add the instructions\n  let message = g.text(\n    \"Tap to give the ball a new random velocity\", \n    \"18px Futura\", \"black\",\n    6, 6\n  );\n\n  //Change the game state to `play`.\n  g.state = play;  \n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n  //Apply gravity to the vertical velocity\n  ball.vy += ball.gravity;\n  \n  //Apply friction. ball.frictionX will be 0.96 if the ball is\n  //on the ground, and 1 if it's in the air\n  ball.vx *= ball.frictionX;\n  \n  //Move the ball by applying the new calculated velocity\n  //to the ball's x and y position\n  ball.x += ball.vx;\n  ball.y += ball.vy;\n  \n  //Use Ga's custom `contain` method to bounce the ball \n  //off the canvas edges and slow it to a stop:\n\n  //1. Use the `contain` method to create a `collision` object \n  //that checks for a collision between the ball and the\n  //rectangular area of the stage. Setting `contain`'s 3rd\n  //argument to `true` will make the ball bounce off the \n  //stage's edges.\n  let collision = g.contain(ball, g.stage, true);\n\n  //2. If the collision object has a value of \"bottom\", it means\n  //the ball has hit the bottom of the stage. In that case, use\n  //friction to slow it down.\n  if (collision) {\n    if (collision.has(\"bottom\")) {\n\n      //Slow the ball down if it hits the bottom of the stage.\n      ball.frictionX = 0.98;\n    } else {\n\n      //If the ball isn't touching the bottom of the stage, it must\n      //still be in the air. In that case,\n      //give the ball a `frictionX` value of `1`, which essentially\n      //means \"don't apply friction\" so that it moves freely.\n      ball.frictionX = 1;\n    }\n  }\n\n  //You can optionally write the bounce code manually using the following 4 if\n  //statements.\n  //These if statements all work in the same way:\n  //If the ball crosses the canvas boundaries:\n  //1. It's repositioned inside the canvas.\n  //2. Its velocity is reversed to make it bounce, with\n  //the mass subtracted so that it looses force over time.\n  //3. If it's on the ground, friction is added to slow it down\n  /*\n  //Left\n  if (ball.x < 0) {\n    ball.x = 0;\n    ball.vx = -ball.vx / ball.mass;\n  }\n  //Right\n  if (ball.x + ball.diameter > canvas.width) {\n    ball.x = canvas.width - ball.diameter;\n    ball.vx = -ball.vx / ball.mass;\n  }\n  //Top\n  if (ball.y < 0) {\n    ball.y = 0;\n    ball.vy = -ball.vy / ball.mass;\n  }\n  //Bottom\n  if(ball.y + ball.diameter > canvas.height) {\n\n    //Position the ball inside the canvas\n    ball.y = canvas.height - ball.diameter;\n\n    //Reverse its velocity to make it bounce, and dampen the effect with mass\n    ball.vy = -ball.vy / ball.mass;\n\n    //Add some friction if it's on the ground\n    ball.frictionX = 0.96;\n  } else {\n\n    //Remove friction if it's not on the ground\n    ball.frictionX = 1;\n  }\n  */\n\n  //Add any extra optional game loop code here.\n}\n"]}