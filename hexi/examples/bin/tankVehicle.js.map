{"version":3,"sources":["../src/tankVehicle.js"],"names":[],"mappings":"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","file":"tankVehicle.js","sourcesContent":["/*\nLearn how to create a generic tank vehicle.\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(256, 256, setup, [\"fonts/puzzler.otf\"]);\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet tank, turret, message;\n\n//If you're not loading any files, start Hexi after\n//you've declared your global variables\ng.start();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //Make the ship and turret\n  tank = g.rectangle(32, 32, \"gray\"),\n  turret = g.line(\"red\", 4, 0, 0, 32, 0);\n\n  //Center the ship's rotation point\n  tank.setPivot(0.5, 0.5);    \n\n  //Add the turret to the ship and place it in the center\n  tank.addChild(turret);\n  turret.x = 0;\n  turret.y = 0;\n\n  //Center the ship on the stage\n  g.stage.putCenter(tank);\n\n  //Add some physics properties\n  tank.vx = 0;\n  tank.vy = 0;\n  tank.accelerationX = 0.2;\n  tank.accelerationY = 0.2;\n  tank.rotationSpeed = 0;\n  tank.friction = 0.96;\n  tank.speed = 0;\n\n  //The speed at which the tank should rotate,\n  //initialized to 0\n  tank.rotationSpeed = 0;\n\n  //Whether or not the tank should move forward\n  tank.moveForward = false;\n  \n  //Define the arrow keys to move the tank\n  let leftArrow = g.keyboard(37),\n      upArrow = g.keyboard(38),\n      rightArrow = g.keyboard(39),\n      downArrow = g.keyboard(40);\n      \n  //Set the tank's `rotationSpeed` to -0.1 (to rotate left) if the\n  //left arrow key is being pressed\n  leftArrow.press = () => {\n    tank.rotationSpeed = -0.1;\n  };\n\n  //If the left arrow key is released and the right arrow\n  //key isn't being pressed down, set the `rotationSpeed` to 0\n  leftArrow.release = () => {\n    if (!rightArrow.isDown) tank.rotationSpeed = 0;\n  };\n\n  //Do the same for the right arrow key, but set\n  //the `rotationSpeed` to 0.1 (to rotate right)\n  rightArrow.press = () => {\n    tank.rotationSpeed = 0.1;\n  };\n\n  rightArrow.release = () => {\n    if (!leftArrow.isDown) tank.rotationSpeed = 0;\n  };\n\n  //Set `tank.moveForward` to `true` if the up arrow key is\n  //pressed, and set it to `false` if it's released\n  upArrow.press = () => {\n    tank.moveForward = true;\n  };\n  upArrow.release = () => {\n    tank.moveForward = false;\n  };\n\n  //Make a text sprite\n  message = g.text(\"\", \"12px puzzler\", \"black\", 8, 8);\n\n  //Change the state to `play`\n  g.state = play;  \n}\n\n//The `play` function will run in a loop\nfunction play() {\n\n//Use the `rotationSpeed` to set the tank's rotation\n  tank.rotation += tank.rotationSpeed;\n\n  //If `tank.moveForward` is `true`, increase the speed\n  if (tank.moveForward) {\n    tank.speed += 0.1;\n  } \n    \n  //If `tank.moveForward` is `false`, use \n  //friction to slow the tank down\n  else {\n    tank.speed *= tank.friction;\n  }\n\n  //Use the `speed` value to figure out the acceleration in the\n  //direction of the tankâ€™s rotation\n  tank.accelerationX = tank.speed * Math.cos(tank.rotation);\n  tank.accelerationY = tank.speed * Math.sin(tank.rotation);\n\n  //Apply the acceleration to the tank's velocity\n  tank.vx = tank.accelerationX;\n  tank.vy = tank.accelerationY;\n\n  //Apply the tank's velocity to its position to make the tank move\n  tank.x += tank.vx;\n  tank.y += tank.vy;\n\n  //Display the tank's angle of rotation\n  message.content = tank.rotation;\n}\n\n"]}