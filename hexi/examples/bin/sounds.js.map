{"version":3,"sources":["../src/sounds.js"],"names":[],"mappings":"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","file":"sounds.js","sourcesContent":["/*\nThis file is a working example of how to use sounds in Hexi.\nHexi implements the latest version of \"Sound.js\" under the\nhood.\nCheck out the \"Sound.js\" repository for full details on how\nto control and generate sounds:\n\nhttps://github.com/kittykatattack/sound.js\n\nThe only difference in Hexi's implementation is that you can pre-load sounds \nthe same way that you can pre-load images and data files.\nAlso, after sounds have loaded you can access them like this:\n\n    g.sound(\"sounds/anySound.mp3\")\n\nLet's find out how it all works:\n*/\n\n//Add the sounds you want to load to your `thingsToLoad` array\nlet thingsToLoad = [\n  \"sounds/shoot.wav\",\n  \"sounds/music.wav\",\n  \"sounds/explosion.wav\",\n  \"fonts/PetMe64.ttf\"\n];\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 512, setup, thingsToLoad);\ng.start();\n\n//Set the background color and scale the canvas\ng.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//Declare variables used in more than one function\nlet button, stateMessage, actionMessage;\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //First, create some sound objects\n  //Use the `sounds` method to create sound objects. The `sound`\n  //method takes one argument: a string that describes the sound file path\n  let shoot = g.sound(\"sounds/shoot.wav\"),\n      explosion = g.sound(\"sounds/explosion.wav\"),\n      music = g.sound(\"sounds/music.wav\");\n\n  //Next, setup the sounds\n\n  //Make the music loop\n  music.loop = true;\n\n  //Set the pan\n  shoot.pan = 0.8;\n  music.pan = -0.8;\n\n  //Set the volume\n  shoot.volume = 0.5;\n  music.volume = 0.3;\n\n  //Create the keyboard objects to play the sounds\n  let one = g.keyboard(49),\n      a = g.keyboard(65),\n      b = g.keyboard(66),\n      c = g.keyboard(67),\n      d = g.keyboard(68),\n      e = g.keyboard(69),\n      f = g.keyboard(70),\n      gee = g.keyboard(71),\n      h = g.keyboard(72),\n      i = g.keyboard(73),\n      j = g.keyboard(74);\n\n  //Create `press` actions for each sound \n  a.press = () => {\n\n    //Allow the music to start playing only once\n    if (!music.playing) music.play(); \n  };\n  b.press = () => music.pause();\n  c.press = () => music.restart();\n  d.press = () => music.playFrom(10);\n  e.press = () => music.fadeOut(3);\n  f.press = () => music.fadeIn(3);\n  one.press = () => shoot.play();\n\n  //You can also generate sound effects from scratch using Hexi's\n  //versatile `soundEffect` function.\n\n  //First, define your sounds as re-usable functions, Play around with\n  //the parameters and listen to how they change the sounds\n\n  //The shoot sound\n  function shootSound() {\n    g.soundEffect(\n      1046.5,           //frequency\n      0,                //attack\n      0.3,              //decay\n      \"sawtooth\",       //waveform\n      1,                //Volume\n      -0.8,             //pan\n      0,                //wait before playing\n      1200,             //pitch bend amount\n      false,            //reverse bend\n      0,                //random pitch range\n      25,               //dissonance\n      [0.2, 0.2, 2000], //echo: [delay, feedback, filter]\n      undefined         //reverb: [duration, decay, reverse?]\n    );\n  }\n\n  //The jump sound\n  function jumpSound() {\n    g.soundEffect(\n      523.25,       //frequency\n      0.05,         //attack\n      0.2,          //decay\n      \"sine\",       //waveform\n      3,            //volume\n      0.8,          //pan\n      0,            //wait before playing\n      600,          //pitch bend amount\n      true,         //reverse\n      100,          //random pitch range\n      0,            //dissonance\n      undefined,    //echo: [delay, feedback, filter]\n      undefined     //reverb: [duration, decay, reverse?]\n    );\n  }\n\n  //The explosion sound\n  function explosionSound() {\n    g.soundEffect(\n      16,          //frequency\n      0,           //attack\n      1,           //decay\n      \"sawtooth\",  //waveform\n      1,           //volume\n      0,           //pan\n      0,           //wait before playing\n      0,           //pitch bend amount\n      false,       //reverse\n      0,           //random pitch range\n      50,          //dissonance\n      undefined,   //echo: [delay, feedback, filter]\n      undefined    //reverb: [duration, decay, reverse?]\n    );\n  }\n\n  //The bonus points sound\n  function bonusSound() {\n    //D\n    g.soundEffect(587.33, 0, 0.2, \"square\", 1, 0, 0);\n    //A\n    g.soundEffect(880, 0, 0.2, \"square\", 1, 0, 0.1);\n    //High D\n    g.soundEffect(1174.66, 0, 0.3, \"square\", 1, 0, 0.2);\n  }\n \n  //Program keyboard keys to play the sounds.\n  gee.press = () => shootSound();\n  h.press = () => jumpSound();\n  i.press = () => explosionSound();\n  j.press = () => bonusSound();\n\n  //Display the instructions\n  let instructions = g.text(\"\", \"12px PetMe64\", \"yellowGreen\");\n  instructions.setPosition(10, 0);\n\n  //Here's an example of how to create multiline text\n  //using ES6 template strings (surounding the text with \n  //backtick characters)\n  instructions.content = \n`\nTo shoot, press 1\n\nTo control music:\n  a - Play\n  b - Pause\n  c - Restart\n  d - Go to 10 second mark\n  e - Fade out\n  f - Fade in\n\nGenerated sound effects\n  g - Shoot \n  h - Jump\n  i - Explosion\n  j - Bonus\n`;\n\n}\n\n\n"]}