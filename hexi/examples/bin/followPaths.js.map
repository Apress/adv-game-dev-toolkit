{"version":3,"sources":["../src/followPaths.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,KAAK,EAAE;;;;AAAC,AAIV,CAAC,CAAC,aAAa,EAAE;;;AAAC,AAGlB,SAAS,KAAK,GAAG;;;AAGf,MAAI,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC9B,KAAG,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC;;;;;AAAC,AAKxB,MAAI,OAAO,GAAG,CAAC,CAAC,QAAQ,CACtB,GAAG;;;AAGH,GACE,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,GAAC,EAAE,EAAE,GAAG,CAAC;AACT,GAAC,GAAG,EAAE,GAAG,CAAC;AACV,GAAC,GAAG,EAAE,EAAE,CAAC;AACT,GAAC,EAAE,EAAE,EAAE;AAAC,GACT,EAED,GAAG;AACH,cAAY;AACZ,MAAI;AACJ,MAAI;AACJ;AAAI,GACL;;;AAAC,AAGF,MAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AACxC,UAAQ,CAAC,WAAW,CAAC,EAAE,EAAE,GAAG,CAAC;;;;;AAAC,AAK9B,MAAI,YAAY,GAAG,CAAC,CAAC,SAAS,CAC5B,QAAQ;;;;AAIR,GACE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAC1D,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC5D,EAED,GAAG;AACH,cAAY;AACZ,MAAI;AACJ,MAAI;AACJ;AAAI,GACL;;;;;AAAC,CAKH","file":"followPaths.js","sourcesContent":["/*\nLearn how to use `walkPath` or `walkCurve` to make a sprite follow a\npath between a series of connected waypoints.\n*/\n\n//Create a new Hexi instance, and start it.\nlet g = hexi(512, 600, setup, [\"images/animals.json\"]);\ng.start();\n\n//Set the background color and scale the canvas\n//g.backgroundColor = \"black\";\ng.scaleToWindow();\n\n//The `setup` function to initialize your application\nfunction setup() {\n\n  //The cat sprite\n  let cat = g.sprite(\"cat.png\"); \n  cat.setPosition(32, 32);\n\n  //Use `walkPath` to make the cat follow a straight path \n  //between a series of connected waypoints. Here's how to use it:\n\n  let catPath = g.walkPath(\n    cat,                   //The sprite\n\n    //An array of x/y waypoints to connect in sequence\n    [\n      [32, 32],            //First x/y point\n      [32, 128],           //Next x/y point\n      [300, 128],          //Next x/y point\n      [300, 32],           //Next x/y point\n      [32, 32]             //Last x/y point\n    ], \n\n    300,                   //Total duration, in frames\n    \"smoothstep\",          //Easing type\n    true,                  //Should the path loop?\n    true,                  //Should the path reverse?\n    1000                   //Delay in milliseconds between segments\n  ); \n\n  //The hedgehog sprite\n  let hedgehog = g.sprite(\"hedgehog.png\"); \n  hedgehog.setPosition(32, 256);\n\n  //Use `walkCurve` to make the hedgehog follow a curved path \n  //between a series of connected waypoints. Here's how to use it:\n\n  let hedgehogPath = g.walkCurve(\n    hedgehog,              //The sprite\n\n    //An array of Bezier curve points that \n    //you want to connect in sequence\n    [\n      [[hedgehog.x, hedgehog.y],[75, 500],[200, 500],[300, 300]],\n      [[300, 300],[250, 100],[100, 100],[hedgehog.x, hedgehog.y]]\n    ],\n\n    300,                   //Total duration, in frames\n    \"smoothstep\",          //Easing type\n    true,                  //Should the path loop?\n    true,                  //Should the path yoyo?\n    1000                   //Delay in milliseconds between segments\n  );\n\n  //Tweens are updated independently in Hexi's internal \n  //game engine loop, so there's no need to update them in\n  //your own `play` state to make them work.\n}\n\n\n"]}