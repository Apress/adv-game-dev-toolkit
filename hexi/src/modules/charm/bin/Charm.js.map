{"version":3,"sources":["../src/charm.js"],"names":[],"mappings":"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","file":"charm.js","sourcesContent":["class Charm {\n  constructor(renderingEngine = PIXI) {\n\n    if (renderingEngine === undefined) throw new Error(\"Please assign a rendering engine in the constructor before using charm.js\");\n\n    //Find out which rendering engine is being used (the default is Pixi)\n    this.renderer = \"\";\n\n    //If the `renderingEngine` is Pixi, set up Pixi object aliases\n    if (renderingEngine.ParticleContainer && renderingEngine.Sprite) {\n      this.renderer = \"pixi\";\n    }\n\n\n    //An array to store the global tweens\n    this.globalTweens = [];\n\n    //An object that stores all the easing formulas\n    this.easingFormulas = {\n\n      //Linear\n      linear(x) {\n        return x;\n      },\n\n      //Smoothstep\n      smoothstep(x) {\n        return x * x * (3 - 2 * x);\n      },\n      smoothstepSquared(x) {\n        return Math.pow((x * x * (3 - 2 * x)), 2);\n      },\n      smoothstepCubed(x) {\n        return Math.pow((x * x * (3 - 2 * x)), 3);\n      },\n\n      //Acceleration\n      acceleration(x) {\n        return x * x;\n      },\n      accelerationCubed(x) {\n        return Math.pow(x * x, 3);\n      },\n\n      //Deceleration\n      deceleration(x) {\n        return 1 - Math.pow(1 - x, 2);\n      },\n      decelerationCubed(x) {\n        return 1 - Math.pow(1 - x, 3);\n      },\n\n      //Sine\n      sine(x) {\n        return Math.sin(x * Math.PI / 2);\n      },\n      sineSquared(x) {\n        return Math.pow(Math.sin(x * Math.PI / 2), 2);\n      },\n      sineCubed(x) {\n        return Math.pow(Math.sin(x * Math.PI / 2), 2);\n      },\n      inverseSine(x) {\n        return 1 - Math.sin((1 - x) * Math.PI / 2);\n      },\n      inverseSineSquared(x) {\n        return 1 - Math.pow(Math.sin((1 - x) * Math.PI / 2), 2);\n      },\n      inverseSineCubed(x) {\n        return 1 - Math.pow(Math.sin((1 - x) * Math.PI / 2), 3);\n      },\n\n      //Spline\n      spline(t, p0, p1, p2, p3) {\n        return 0.5 * (\n          (2 * p1) +\n          (-p0 + p2) * t +\n          (2 * p0 - 5 * p1 + 4 * p2 - p3) * t * t +\n          (-p0 + 3 * p1 - 3 * p2 + p3) * t * t * t\n        );\n      },\n\n      //Bezier curve\n      cubicBezier(t, a, b, c, d) {\n        let t2 = t * t;\n        let t3 = t2 * t;\n        return a + (-a * 3 + t * (3 * a - a * t)) * t + (3 * b + t * (-6 * b + b * 3 * t)) * t + (c * 3 - c * 3 * t) * t2 + d * t3;\n      }\n    };\n\n    //Add `scaleX` and `scaleY` properties to Pixi sprites\n    this._addScaleProperties = (sprite) => {\n      if (this.renderer === \"pixi\") {\n        if (!sprite.scaleX && sprite.scale.x) {\n          Object.defineProperty(\n            sprite,\n            \"scaleX\", {\n              get() {\n                return sprite.scale.x\n              },\n              set(value) {\n                sprite.scale.x = value\n              }\n            }\n          );\n        }\n        if (!sprite.scaleY && sprite.scale.y) {\n          Object.defineProperty(\n            sprite,\n            \"scaleY\", {\n              get() {\n                return sprite.scale.y\n              },\n              set(value) {\n                sprite.scale.y = value\n              }\n            }\n          );\n        }\n      }\n    };\n  }\n\n  //The low level `tweenProperty` function is used as the foundation\n  //for the the higher level tween methods.\n  tweenProperty(\n    sprite, //Sprite object\n    property, //String property\n    startValue, //Tween start value\n    endValue, //Tween end value\n    totalFrames, //Duration in frames\n    type = \"smoothstep\", //The easing type\n    yoyo = false, //Yoyo?\n    delayBeforeRepeat = 0 //Delay in frames before repeating\n  ) {\n\n    //Create the tween object\n    let o = {};\n\n    //If the tween is a bounce type (a spline), set the\n    //start and end magnitude values\n    let typeArray = type.split(\" \");\n    if (typeArray[0] === \"bounce\") {\n      o.startMagnitude = parseInt(typeArray[1]);\n      o.endMagnitude = parseInt(typeArray[2]);\n    }\n\n    //Use `o.start` to make a new tween using the current\n    //end point values\n    o.start = (startValue, endValue) => {\n\n      //Clone the start and end values so that any possible references to sprite\n      //properties are converted to ordinary numbers \n      o.startValue = JSON.parse(JSON.stringify(startValue));\n      o.endValue = JSON.parse(JSON.stringify(endValue));\n      o.playing = true;\n      o.totalFrames = totalFrames;\n      o.frameCounter = 0;\n\n      //Add the tween to the global `tweens` array. The `tweens` array is\n      //updated on each frame\n      this.globalTweens.push(o);\n    };\n\n    //Call `o.start` to start the tween\n    o.start(startValue, endValue);\n\n    //The `update` method will be called on each frame by the game loop.\n    //This is what makes the tween move\n    o.update = () => {\n\n      let time, curvedTime;\n\n      if (o.playing) {\n\n        //If the elapsed frames are less than the total frames,\n        //use the tweening formulas to move the sprite\n        if (o.frameCounter < o.totalFrames) {\n\n          //Find the normalized value\n          let normalizedTime = o.frameCounter / o.totalFrames;\n\n          //Select the correct easing function from the \n          //`ease` object’s library of easing functions\n\n\n          //If it's not a spline, use one of the ordinary easing functions\n          if (typeArray[0] !== \"bounce\") {\n            curvedTime = this.easingFormulas[type](normalizedTime);\n          }\n\n          //If it's a spline, use the `spline` function and apply the\n          //2 additional `type` array values as the spline's start and\n          //end points\n          else {\n            curvedTime = this.easingFormulas.spline(normalizedTime, o.startMagnitude, 0, 1, o.endMagnitude);\n          }\n\n          //Interpolate the sprite's property based on the curve\n          sprite[property] = (o.endValue * curvedTime) + (o.startValue * (1 - curvedTime));\n\n          o.frameCounter += 1;\n        }\n\n        //When the tween has finished playing, run the end tasks\n        else {\n          sprite[property] = o.endValue;\n          o.end();\n        }\n      }\n    };\n\n    //The `end` method will be called when the tween is finished\n    o.end = () => {\n\n      //Set `playing` to `false`\n      o.playing = false;\n\n      //Call the tween's `onComplete` method, if it's been assigned\n      if (o.onComplete) o.onComplete();\n\n      //Remove the tween from the `tweens` array\n      this.globalTweens.splice(this.globalTweens.indexOf(o), 1);\n\n      //If the tween's `yoyo` property is `true`, create a new tween\n      //using the same values, but use the current tween's `startValue`\n      //as the next tween's `endValue` \n      if (yoyo) {\n        this.wait(delayBeforeRepeat).then(() => {\n          o.start(o.endValue, o.startValue);\n        });\n      }\n    };\n\n    //Pause and play methods\n    o.play = () => o.playing = true;\n    o.pause = () => o.playing = false;\n\n    //Return the tween object\n    return o;\n  }\n\n  //`makeTween` is a general low-level method for making complex tweens\n  //out of multiple `tweenProperty` functions. Its one argument,\n  //`tweensToAdd` is an array containing multiple `tweenProperty` calls\n\n  makeTween(tweensToAdd) {\n\n    //Create an object to manage the tweens\n    let o = {};\n\n    //Create a `tweens` array to store the new tweens\n    o.tweens = [];\n\n    //Make a new tween for each array\n    tweensToAdd.forEach(tweenPropertyArguments => {\n\n      //Use the tween property arguments to make a new tween\n      let newTween = this.tweenProperty(...tweenPropertyArguments);\n\n      //Push the new tween into this object's internal `tweens` array\n      o.tweens.push(newTween);\n    });\n\n    //Add a counter to keep track of the\n    //number of tweens that have completed their actions\n    let completionCounter = 0;\n\n    //`o.completed` will be called each time one of the tweens\n    //finishes\n    o.completed = () => {\n\n      //Add 1 to the `completionCounter`\n      completionCounter += 1;\n\n      //If all tweens have finished, call the user-defined `onComplete`\n      //method, if it's been assigned. Reset the `completionCounter`\n      if (completionCounter === o.tweens.length) {\n        if (o.onComplete) o.onComplete();\n        completionCounter = 0;\n      }\n    };\n\n    //Add `onComplete` methods to all tweens\n    o.tweens.forEach(tween => {\n      tween.onComplete = () => o.completed();\n    });\n\n    //Add pause and play methods to control all the tweens\n    o.pause = () => {\n      o.tweens.forEach(tween => {\n        tween.playing = false;\n      });\n    };\n    o.play = () => {\n      o.tweens.forEach(tween => {\n        tween.playing = true;\n      });\n    };\n\n    //Return the tween object\n    return o;\n  }\n\n  /* High level tween methods */\n\n  //1. Simple tweens\n\n  //`fadeOut`\n  fadeOut(sprite, frames = 60) {\n    return this.tweenProperty(\n      sprite, \"alpha\", sprite.alpha, 0, frames, \"sine\"\n    );\n  }\n\n  //`fadeIn`\n  fadeIn(sprite, frames = 60) {\n    return this.tweenProperty(\n      sprite, \"alpha\", sprite.alpha, 1, frames, \"sine\"\n    );\n  }\n\n  //`pulse`\n  //Fades the sprite in and out at a steady rate.\n  //Set the `minAlpha` to something greater than 0 if you\n  //don't want the sprite to fade away completely\n  pulse(sprite, frames = 60, minAlpha = 0) {\n    return this.tweenProperty(\n      sprite, \"alpha\", sprite.alpha, minAlpha, frames, \"smoothstep\", true\n    );\n  }\n\n  //2. Complex tweens\n\n  slide(\n    sprite, endX, endY,\n    frames = 60, type = \"smoothstep\", yoyo = false, delayBeforeRepeat = 0\n  ) {\n    return this.makeTween([\n\n      //Create the x axis tween\n      [sprite, \"x\", sprite.x, endX, frames, type, yoyo, delayBeforeRepeat],\n\n      //Create the y axis tween\n      [sprite, \"y\", sprite.y, endY, frames, type, yoyo, delayBeforeRepeat]\n\n    ]);\n  }\n\n  breathe(\n    sprite, endScaleX = 0.8, endScaleY = 0.8,\n    frames = 60, yoyo = true, delayBeforeRepeat = 0\n  ) {\n\n    //Add `scaleX` and `scaleY` properties to Pixi sprites\n    this._addScaleProperties(sprite);\n\n    return this.makeTween([\n\n      //Create the scaleX tween\n      [\n        sprite, \"scaleX\", sprite.scaleX, endScaleX,\n        frames, \"smoothstepSquared\", yoyo, delayBeforeRepeat\n      ],\n\n      //Create the scaleY tween\n      [\n        sprite, \"scaleY\", sprite.scaleY, endScaleY,\n        frames, \"smoothstepSquared\", yoyo, delayBeforeRepeat\n      ]\n    ]);\n  }\n\n  scale(sprite, endScaleX = 0.5, endScaleY = 0.5, frames = 60) {\n\n    //Add `scaleX` and `scaleY` properties to Pixi sprites\n    this._addScaleProperties(sprite);\n\n    return this.makeTween([\n\n      //Create the scaleX tween\n      [\n        sprite, \"scaleX\", sprite.scaleX, endScaleX,\n        frames, \"smoothstep\", false\n      ],\n\n      //Create the scaleY tween\n      [\n        sprite, \"scaleY\", sprite.scaleY, endScaleY,\n        frames, \"smoothstep\", false\n      ]\n    ]);\n  }\n\n  strobe(\n    sprite, scaleFactor = 1.3, startMagnitude = 10, endMagnitude = 20,\n    frames = 10, yoyo = true, delayBeforeRepeat = 0\n  ) {\n\n    let bounce = \"bounce \" + startMagnitude + \" \" + endMagnitude;\n\n    //Add `scaleX` and `scaleY` properties to Pixi sprites\n    this._addScaleProperties(sprite);\n\n    return this.makeTween([\n\n      //Create the scaleX tween\n      [\n        sprite, \"scaleX\", sprite.scaleX, scaleFactor, frames,\n        bounce, yoyo, delayBeforeRepeat\n      ],\n\n      //Create the scaleY tween\n      [\n        sprite, \"scaleY\", sprite.scaleY, scaleFactor, frames,\n        bounce, yoyo, delayBeforeRepeat\n      ]\n    ]);\n  }\n\n  wobble(\n    sprite,\n    scaleFactorX = 1.2,\n    scaleFactorY = 1.2,\n    frames = 10,\n    xStartMagnitude = 10,\n    xEndMagnitude = 10,\n    yStartMagnitude = -10,\n    yEndMagnitude = -10,\n    friction = 0.98,\n    yoyo = true,\n    delayBeforeRepeat = 0\n  ) {\n\n    let bounceX = \"bounce \" + xStartMagnitude + \" \" + xEndMagnitude;\n    let bounceY = \"bounce \" + yStartMagnitude + \" \" + yEndMagnitude;\n\n    //Add `scaleX` and `scaleY` properties to Pixi sprites\n    this._addScaleProperties(sprite);\n\n    let o = this.makeTween([\n\n      //Create the scaleX tween\n      [\n        sprite, \"scaleX\", sprite.scaleX, scaleFactorX, frames,\n        bounceX, yoyo, delayBeforeRepeat\n      ],\n\n      //Create the scaleY tween\n      [\n        sprite, \"scaleY\", sprite.scaleY, scaleFactorY, frames,\n        bounceY, yoyo, delayBeforeRepeat\n      ]\n    ]);\n\n    //Add some friction to the `endValue` at the end of each tween \n    o.tweens.forEach(tween => {\n      tween.onComplete = () => {\n\n        //Add friction if the `endValue` is greater than 1\n        if (tween.endValue > 1) {\n          tween.endValue *= friction;\n\n          //Set the `endValue` to 1 when the effect is finished and \n          //remove the tween from the global `tweens` array\n          if (tween.endValue <= 1) {\n            tween.endValue = 1;\n            this.removeTween(tween);\n          }\n        }\n      };\n    });\n\n    return o;\n  }\n\n  //3. Motion path tweens\n\n  followCurve(\n    sprite,\n    pointsArray,\n    totalFrames,\n    type = \"smoothstep\",\n    yoyo = false,\n    delayBeforeRepeat = 0\n  ) {\n\n    //Create the tween object\n    let o = {};\n\n    //If the tween is a bounce type (a spline), set the\n    //start and end magnitude values\n    let typeArray = type.split(\" \");\n    if (typeArray[0] === \"bounce\") {\n      o.startMagnitude = parseInt(typeArray[1]);\n      o.endMagnitude = parseInt(typeArray[2]);\n    }\n\n    //Use `tween.start` to make a new tween using the current\n    //end point values\n    o.start = (pointsArray) => {\n      o.playing = true;\n      o.totalFrames = totalFrames;\n      o.frameCounter = 0;\n\n      //Clone the points array\n      o.pointsArray = JSON.parse(JSON.stringify(pointsArray));\n\n      //Add the tween to the `globalTweens` array. The `globalTweens` array is\n      //updated on each frame\n      this.globalTweens.push(o);\n    };\n\n    //Call `tween.start` to start the first tween\n    o.start(pointsArray);\n\n    //The `update` method will be called on each frame by the game loop.\n    //This is what makes the tween move\n    o.update = () => {\n\n      let normalizedTime, curvedTime,\n        p = o.pointsArray;\n\n      if (o.playing) {\n\n        //If the elapsed frames are less than the total frames,\n        //use the tweening formulas to move the sprite\n        if (o.frameCounter < o.totalFrames) {\n\n          //Find the normalized value\n          normalizedTime = o.frameCounter / o.totalFrames;\n\n          //Select the correct easing function\n\n          //If it's not a spline, use one of the ordinary tween\n          //functions\n          if (typeArray[0] !== \"bounce\") {\n            curvedTime = this.easingFormulas[type](normalizedTime);\n          }\n\n          //If it's a spline, use the `spline` function and apply the\n          //2 additional `type` array values as the spline's start and\n          //end points\n          else {\n            //curve = tweenFunction.spline(n, type[1], 0, 1, type[2]);\n            curvedTime = this.easingFormulas.spline(normalizedTime, o.startMagnitude, 0, 1, o.endMagnitude);\n          }\n\n          //Apply the Bezier curve to the sprite's position \n          sprite.x = this.easingFormulas.cubicBezier(curvedTime, p[0][0], p[1][0], p[2][0], p[3][0]);\n          sprite.y = this.easingFormulas.cubicBezier(curvedTime, p[0][1], p[1][1], p[2][1], p[3][1]);\n\n          //Add one to the `elapsedFrames`\n          o.frameCounter += 1;\n        }\n\n        //When the tween has finished playing, run the end tasks\n        else {\n          //sprite[property] = o.endValue;\n          o.end();\n        }\n      }\n    };\n\n    //The `end` method will be called when the tween is finished\n    o.end = () => {\n\n      //Set `playing` to `false`\n      o.playing = false;\n\n      //Call the tween's `onComplete` method, if it's been\n      //assigned\n      if (o.onComplete) o.onComplete();\n\n      //Remove the tween from the global `tweens` array\n      this.globalTweens.splice(this.globalTweens.indexOf(o), 1);\n\n      //If the tween's `yoyo` property is `true`, reverse the array and\n      //use it to create a new tween\n      if (yoyo) {\n        this.wait(delayBeforeRepeat).then(() => {\n          o.pointsArray = o.pointsArray.reverse();\n          o.start(o.pointsArray);\n        });\n      }\n    };\n\n    //Pause and play methods\n    o.pause = () => {\n      o.playing = false;\n    };\n    o.play = () => {\n      o.playing = true;\n    };\n\n    //Return the tween object\n    return o;\n  }\n\n  walkPath(\n    sprite, //The sprite\n    originalPathArray, //A 2D array of waypoints\n    totalFrames = 300, //The duration, in frames\n    type = \"smoothstep\", //The easing type\n    loop = false, //Should the animation loop?\n    yoyo = false, //Shoud the direction reverse?\n    delayBetweenSections = 0 //Delay, in milliseconds, between sections\n  ) {\n\n    //Clone the path array so that any possible references to sprite\n    //properties are converted into ordinary numbers \n    let pathArray = JSON.parse(JSON.stringify(originalPathArray));\n\n    //Figure out the duration, in frames, of each path section by \n    //dividing the `totalFrames` by the length of the `pathArray`\n    let frames = totalFrames / pathArray.length;\n\n    //Set the current point to 0, which will be the first waypoint\n    let currentPoint = 0;\n\n    //The `makePath` function creates a single tween between two points and\n    //then schedules the next path to be made after it\n    let makePath = (currentPoint) => {\n\n      //Use the `makeTween` function to tween the sprite's\n      //x and y position\n      let tween = this.makeTween([\n\n        //Create the x axis tween between the first x value in the\n        //current point and the x value in the following point\n        [\n          sprite,\n          \"x\",\n          pathArray[currentPoint][0],\n          pathArray[currentPoint + 1][0],\n          frames,\n          type\n        ],\n\n        //Create the y axis tween in the same way\n        [\n          sprite,\n          \"y\",\n          pathArray[currentPoint][1],\n          pathArray[currentPoint + 1][1],\n          frames,\n          type\n        ]\n      ]);\n\n      //When the tween is complete, advance the `currentPoint` by one.\n      //Add an optional delay between path segments, and then make the\n      //next connecting path\n      tween.onComplete = () => {\n\n        //Advance to the next point\n        currentPoint += 1;\n\n        //If the sprite hasn't reached the end of the\n        //path, tween the sprite to the next point\n        if (currentPoint < pathArray.length - 1) {\n          this.wait(delayBetweenSections).then(() => {\n            tween = makePath(currentPoint);\n          });\n        }\n\n        //If we've reached the end of the path, optionally\n        //loop and yoyo it\n        else {\n\n          //Reverse the path if `loop` is `true`\n          if (loop) {\n\n            //Reverse the array if `yoyo` is `true`\n            if (yoyo) pathArray.reverse();\n\n            //Optionally wait before restarting\n            this.wait(delayBetweenSections).then(() => {\n\n              //Reset the `currentPoint` to 0 so that we can\n              //restart at the first point\n              currentPoint = 0;\n\n              //Set the sprite to the first point\n              sprite.x = pathArray[0][0];\n              sprite.y = pathArray[0][1];\n\n              //Make the first new path\n              tween = makePath(currentPoint);\n\n              //... and so it continues!\n            });\n          }\n        }\n      };\n\n      //Return the path tween to the main function\n      return tween;\n    };\n\n    //Make the first path using the internal `makePath` function (below)\n    let tween = makePath(currentPoint);\n\n    //Pass the tween back to the main program\n    return tween;\n  }\n\n  walkCurve(\n    sprite, //The sprite\n    pathArray, //2D array of Bezier curves\n    totalFrames = 300, //The duration, in frames\n    type = \"smoothstep\", //The easing type\n    loop = false, //Should the animation loop?\n    yoyo = false, //Should the direction reverse?\n    delayBeforeContinue = 0 //Delay, in milliseconds, between sections\n  ) {\n\n    //Divide the `totalFrames` into sections for each part of the path\n    let frames = totalFrames / pathArray.length;\n\n    //Set the current curve to 0, which will be the first one\n    let currentCurve = 0;\n\n    //The `makePath` function\n    let makePath = (currentCurve) => {\n\n      //Use the custom `followCurve` function to make\n      //a sprite follow a curve\n      let tween = this.followCurve(\n        sprite,\n        pathArray[currentCurve],\n        frames,\n        type\n      );\n\n      //When the tween is complete, advance the `currentCurve` by one.\n      //Add an optional delay between path segments, and then make the\n      //next path\n      tween.onComplete = () => {\n        currentCurve += 1;\n        if (currentCurve < pathArray.length) {\n          this.wait(delayBeforeContinue).then(() => {\n            tween = makePath(currentCurve);\n          });\n        }\n\n        //If we've reached the end of the path, optionally\n        //loop and reverse it\n        else {\n          if (loop) {\n            if (yoyo) {\n\n              //Reverse order of the curves in the `pathArray` \n              pathArray.reverse();\n\n              //Reverse the order of the points in each curve\n              pathArray.forEach(curveArray => curveArray.reverse());\n            }\n\n            //After an optional delay, reset the sprite to the\n            //beginning of the path and make the next new path\n            this.wait(delayBeforeContinue).then(() => {\n              currentCurve = 0;\n              sprite.x = pathArray[0][0];\n              sprite.y = pathArray[0][1];\n              tween = makePath(currentCurve);\n            });\n          }\n        }\n      };\n\n      //Return the path tween to the main function\n      return tween;\n    };\n\n    //Make the first path\n    let tween = makePath(currentCurve);\n\n    //Pass the tween back to the main program\n    return tween;\n  }\n\n  //4. Utilities\n\n  /*\n  The `wait` method lets you set up a timed sequence of events\n\n    wait(1000)\n      .then(() => console.log(\"One\"))\n      .then(() => wait(1000))\n      .then(() => console.log(\"Two\"))\n      .then(() => wait(1000))\n      .then(() => console.log(\"Three\"))\n\n  */\n\n  wait(duration = 0) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, duration);\n    });\n  }\n\n  //A utility to remove tweens from the game\n  removeTween(tweenObject) {\n\n    //Remove the tween if `tweenObject` doesn't have any nested\n    //tween objects\n    if (!tweenObject.tweens) {\n      tweenObject.pause();\n      this.globalTweens.splice(this.globalTweens.indexOf(tweenObject), 1);\n\n      //Otherwise, remove the nested tween objects\n    } else {\n      tweenObject.pause();\n      tweenObject.tweens.forEach(element => {\n        this.globalTweens.splice(this.globalTweens.indexOf(element), 1);\n      });\n    }\n  }\n\n  update() {\n\n    //Update all the tween objects in the `globalTweens` array\n    if (this.globalTweens.length > 0) {\n      for (let i = this.globalTweens.length - 1; i >= 0; i--) {\n        let tween = this.globalTweens[i];\n        if (tween) tween.update();\n      }\n    }\n  }\n}"]}